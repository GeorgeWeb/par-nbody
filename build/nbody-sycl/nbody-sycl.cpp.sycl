//==-------------------------------------------------------==//
//
// WARNING: This file is auto-generated. Do not modify.
//
// SYCL Device Compiler:
//   Codeplay ComputeCpp - CE 1.0.1 Device Compiler - clang version 6.0.0 (git@git.office.codeplay.com:sycl/clang.git f77b7c1bd252776d5d433c773a6239dc0c8849eb) (git@git.office.codeplay.com:sycl/llvm.git c0623ebd335ef856ca8fa2f96c15019db764132c) (based on LLVM 6.0.0svn)
//
//==-------------------------------------------------------==//
#ifndef CODEPLAY_SYCL_nbody_sycl_cpp_STUB
#define CODEPLAY_SYCL_nbody_sycl_cpp_STUB

#include <cstddef>
#include <SYCL/predefines.h>
#include <SYCL/common.h>

namespace cl {
namespace sycl {
namespace detail {
namespace {
// SYCL kernel traits primary template
template <typename T>
struct kernel_info;

 static_assert(1== COMPUTECPP_VERSION_MAJOR &&
0== COMPUTECPP_VERSION_MINOR &&
1== COMPUTECPP_VERSION_PATCH,"Error: Mismatch between compiler and runtime. Please ensure both are at the latest version. Compiler is version:1.0.1 Runtime: " __COMPUTECPP__ );

} // namespace
} // namespace detail
} // namespace sycl
} // namespace cl
namespace cl {
namespace sycl {
namespace detail {
namespace {
unsigned char SYCL_nbody_sycl_cpp_bin_spir64[] = {
  0x42, 0x43, 0xc0, 0xde, 0x21, 0x0c, 0x00, 0x00, 0x43, 0x06, 0x00, 0x00,
  0x01, 0x10, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x07, 0x81, 0x23, 0x91,
  0x41, 0xc8, 0x04, 0x49, 0x06, 0x10, 0x32, 0x39, 0x92, 0x01, 0x84, 0x0c,
  0x25, 0x05, 0x08, 0x19, 0x1e, 0x04, 0x8b, 0x62, 0x80, 0x18, 0x45, 0x02,
  0x42, 0x92, 0x0b, 0x42, 0xc4, 0x10, 0x32, 0x14, 0x38, 0x08, 0x18, 0x49,
  0x0a, 0x32, 0x44, 0x24, 0x48, 0x0a, 0x90, 0x21, 0x23, 0xc4, 0x52, 0x80,
  0x0c, 0x19, 0x21, 0x72, 0x24, 0x07, 0xc8, 0x88, 0x11, 0x62, 0xa8, 0xa0,
  0xa8, 0x40, 0xc6, 0xf0, 0x01, 0x00, 0x00, 0x00, 0x49, 0x18, 0x00, 0x00,
  0x1c, 0x00, 0x00, 0x00, 0x0b, 0x08, 0x00, 0xf8, 0xff, 0xff, 0xff, 0xff,
  0x01, 0x8c, 0x16, 0x10, 0x00, 0xf0, 0xff, 0xff, 0xff, 0xff, 0x03, 0xb0,
  0x00, 0x02, 0x80, 0x00, 0x10, 0x40, 0x12, 0x04, 0x41, 0x90, 0x18, 0x00,
  0x02, 0x24, 0x41, 0x10, 0x04, 0x89, 0x02, 0x30, 0x40, 0x32, 0x04, 0x41,
  0x90, 0xf8, 0xff, 0xff, 0xff, 0xff, 0x01, 0x0c, 0x16, 0x40, 0x00, 0x10,
  0x00, 0x02, 0x48, 0x82, 0x20, 0x08, 0x12, 0x03, 0x40, 0x80, 0x24, 0x08,
  0x82, 0x20, 0x51, 0x00, 0x06, 0x48, 0x82, 0x20, 0x08, 0x12, 0xff, 0xff,
  0xff, 0xff, 0x3f, 0x80, 0xc1, 0x02, 0xe1, 0xff, 0xff, 0xff, 0xff, 0x07,
  0x60, 0x81, 0xf0, 0xff, 0xff, 0xff, 0xff, 0x03, 0x18, 0x2d, 0x10, 0xfe,
  0xff, 0xff, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x89, 0x20, 0x00, 0x00,
  0x88, 0x00, 0x00, 0x00, 0x32, 0x22, 0x88, 0x09, 0x20, 0x64, 0x85, 0x04,
  0x13, 0x23, 0xa4, 0x84, 0x04, 0x13, 0x23, 0xe3, 0x84, 0xa1, 0x90, 0x14,
  0x12, 0x4c, 0x8c, 0x8c, 0x0b, 0x84, 0xc4, 0x4c, 0x10, 0xa0, 0xc1, 0x1c,
  0x01, 0x28, 0xcc, 0x11, 0x80, 0x41, 0x11, 0x80, 0x80, 0x84, 0x11, 0x80,
  0x22, 0x10, 0x01, 0x15, 0x33, 0x00, 0xc3, 0x08, 0xc3, 0x51, 0x84, 0x03,
  0xa1, 0xa4, 0x08, 0x08, 0x42, 0xcb, 0x4c, 0x6d, 0x30, 0x0e, 0xec, 0x10,
  0x0e, 0xf3, 0x30, 0x0f, 0x6e, 0x30, 0x0e, 0xec, 0xa0, 0x07, 0x7a, 0x30,
  0x0f, 0xf9, 0x30, 0x0e, 0xec, 0xa0, 0x07, 0x7a, 0x40, 0x0e, 0xe5, 0x40,
  0x0f, 0xe1, 0x90, 0x0e, 0xec, 0xa0, 0x07, 0x7a, 0xd0, 0x0e, 0xe5, 0xd0,
  0x0e, 0xbf, 0x30, 0x0e, 0xef, 0xe0, 0x0e, 0xf4, 0x10, 0x0e, 0xe9, 0xe0,
  0x0e, 0xe5, 0x20, 0x0f, 0xbf, 0x30, 0x0f, 0xf4, 0xf0, 0x0e, 0xf2, 0x10,
  0x0e, 0xe7, 0x50, 0x0e, 0x28, 0x40, 0x66, 0x52, 0x83, 0x71, 0x60, 0x87,
  0x70, 0x98, 0x87, 0x79, 0x70, 0x83, 0x71, 0x60, 0x07, 0x3d, 0xd0, 0x83,
  0x79, 0xc8, 0x87, 0x71, 0x60, 0x07, 0x3d, 0xd0, 0x03, 0x72, 0x28, 0x07,
  0x7a, 0x08, 0x87, 0x74, 0x60, 0x07, 0x3d, 0xd0, 0x83, 0x76, 0x28, 0x87,
  0x76, 0xf8, 0x85, 0x71, 0x78, 0x07, 0x77, 0xa0, 0x87, 0x70, 0x48, 0x07,
  0x77, 0x28, 0x07, 0x79, 0xf8, 0x05, 0x71, 0x08, 0x87, 0x79, 0x28, 0x07,
  0x14, 0x34, 0x33, 0x9d, 0xc1, 0x38, 0xb0, 0x43, 0x38, 0xcc, 0xc3, 0x3c,
  0xb8, 0xc1, 0x38, 0xb0, 0x83, 0x1e, 0xe8, 0xc1, 0x3c, 0xe4, 0xc3, 0x38,
  0xb0, 0x83, 0x1e, 0xe8, 0x01, 0x39, 0x94, 0x03, 0x3d, 0x84, 0x43, 0x3a,
  0xb0, 0x83, 0x1e, 0xe8, 0x41, 0x3b, 0x94, 0x43, 0x3b, 0xfc, 0xc2, 0x38,
  0xbc, 0x83, 0x3b, 0xd0, 0x43, 0x38, 0xa4, 0x83, 0x3b, 0x94, 0x83, 0x3c,
  0xb8, 0x41, 0x1c, 0xa0, 0xc0, 0x99, 0xe9, 0x0c, 0xc6, 0x81, 0x1d, 0xc2,
  0x61, 0x1e, 0xe6, 0xc1, 0x0d, 0xc6, 0x81, 0x1d, 0xf4, 0x40, 0x0f, 0xe6,
  0x21, 0x1f, 0xc6, 0x81, 0x1d, 0xf4, 0x40, 0x0f, 0xc8, 0xa1, 0x1c, 0xe8,
  0x21, 0x1c, 0xd2, 0x81, 0x1d, 0xf4, 0x40, 0x0f, 0xda, 0xa1, 0x1c, 0xda,
  0xe1, 0x17, 0xc6, 0xe1, 0x1d, 0xdc, 0x81, 0x1e, 0xc2, 0x21, 0x1d, 0xdc,
  0xa1, 0x1c, 0xe4, 0xc1, 0x0d, 0xe0, 0x00, 0x05, 0xcf, 0x4c, 0x65, 0x30,
  0x0e, 0xec, 0x10, 0x0e, 0xf3, 0x30, 0x0f, 0x6e, 0x30, 0x0e, 0xec, 0xa0,
  0x07, 0x7a, 0x30, 0x0f, 0xf9, 0x30, 0x0e, 0xec, 0xa0, 0x07, 0x7a, 0x40,
  0x0e, 0xe5, 0x40, 0x0f, 0xe1, 0x90, 0x0e, 0xec, 0xa0, 0x07, 0x7a, 0xd0,
  0x0e, 0xe5, 0xd0, 0x0e, 0xbf, 0x30, 0x0e, 0xef, 0xe0, 0x0e, 0xf4, 0x10,
  0x0e, 0xe9, 0xe0, 0x0e, 0xe5, 0x20, 0x0f, 0x28, 0x80, 0x66, 0x9a, 0xc6,
  0x81, 0x1d, 0xc2, 0x61, 0x1e, 0xe6, 0xc1, 0x0d, 0xc6, 0x81, 0x1d, 0xf4,
  0x40, 0x0f, 0xe6, 0x21, 0x1f, 0xc6, 0x81, 0x1d, 0xf4, 0x40, 0x0f, 0xec,
  0xa1, 0x1c, 0xc6, 0x01, 0x05, 0xd1, 0x20, 0x82, 0x14, 0x24, 0x41, 0x30,
  0x93, 0x18, 0x8c, 0x03, 0x3b, 0x84, 0xc3, 0x3c, 0xcc, 0x83, 0x1b, 0x8c,
  0x03, 0x3b, 0xe8, 0x81, 0x1e, 0xcc, 0x43, 0x3e, 0x8c, 0x03, 0x3b, 0xe8,
  0x81, 0x1e, 0x90, 0x43, 0x39, 0xd8, 0x43, 0x3a, 0x8c, 0x43, 0x39, 0xfc,
  0x42, 0x3a, 0xb8, 0x03, 0x39, 0x94, 0x03, 0x3e, 0xfc, 0x42, 0x38, 0xc8,
  0x83, 0x3c, 0x84, 0x43, 0x3e, 0xa0, 0x80, 0xa2, 0x6a, 0x10, 0xe1, 0x08,
  0xca, 0x41, 0x4c, 0xd6, 0x65, 0x4d, 0x16, 0x61, 0x05, 0x21, 0x26, 0x6b,
  0xb2, 0x26, 0xeb, 0x20, 0x6d, 0x10, 0x41, 0x1a, 0xca, 0x41, 0x70, 0xdc,
  0x34, 0x4d, 0x07, 0x75, 0x03, 0x01, 0x14, 0x0c, 0x23, 0x10, 0xc7, 0x20,
  0x42, 0x18, 0x04, 0x53, 0x00, 0xc3, 0x08, 0x43, 0x30, 0x47, 0x10, 0x0c,
  0x23, 0x10, 0xc1, 0x20, 0x42, 0x18, 0x0c, 0x00, 0x13, 0xac, 0x79, 0x80,
  0x87, 0x74, 0x90, 0x07, 0x3b, 0xa0, 0x83, 0x36, 0xa8, 0x07, 0x77, 0x58,
  0x07, 0x77, 0x78, 0x87, 0x7b, 0x70, 0x87, 0x36, 0xa8, 0x07, 0x77, 0x58,
  0x07, 0x77, 0x78, 0x87, 0x7b, 0x70, 0x87, 0x0d, 0xae, 0x51, 0x0e, 0x6d,
  0x00, 0x0f, 0x7a, 0x60, 0x07, 0x74, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x7a,
  0x60, 0x07, 0x74, 0xd0, 0x06, 0xe9, 0x10, 0x07, 0x7a, 0x80, 0x07, 0x7a,
  0x80, 0x07, 0x6d, 0x90, 0x0e, 0x78, 0xa0, 0x07, 0x78, 0xa0, 0x07, 0x78,
  0xd0, 0x06, 0xe9, 0x10, 0x07, 0x76, 0xa0, 0x07, 0x71, 0x60, 0x07, 0x7a,
  0x10, 0x07, 0x76, 0xd0, 0x06, 0xe9, 0x30, 0x07, 0x72, 0xa0, 0x07, 0x73,
  0x20, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x60, 0x07, 0x74,
  0xa0, 0x07, 0x76, 0x40, 0x07, 0x7a, 0x60, 0x07, 0x74, 0xd0, 0x06, 0xe6,
  0x30, 0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72,
  0xd0, 0x06, 0xe6, 0x60, 0x07, 0x74, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x7a,
  0x60, 0x07, 0x74, 0xd0, 0x06, 0xf6, 0x10, 0x07, 0x76, 0xa0, 0x07, 0x71,
  0x60, 0x07, 0x7a, 0x10, 0x07, 0x76, 0xd0, 0x06, 0xf6, 0x20, 0x07, 0x74,
  0xa0, 0x07, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xf6,
  0x30, 0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72,
  0xd0, 0x06, 0xf6, 0x40, 0x07, 0x78, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x7a,
  0x60, 0x07, 0x74, 0xd0, 0x06, 0xf6, 0x60, 0x07, 0x74, 0xa0, 0x07, 0x76,
  0x40, 0x07, 0x7a, 0x60, 0x07, 0x74, 0xd0, 0x06, 0xf6, 0x90, 0x07, 0x76,
  0xa0, 0x07, 0x71, 0x20, 0x07, 0x78, 0xa0, 0x07, 0x71, 0x20, 0x07, 0x78,
  0xd0, 0x06, 0xf6, 0x10, 0x07, 0x72, 0x80, 0x07, 0x7a, 0x10, 0x07, 0x72,
  0x80, 0x07, 0x7a, 0x10, 0x07, 0x72, 0x80, 0x07, 0x6d, 0x60, 0x0f, 0x71,
  0x90, 0x07, 0x72, 0xa0, 0x07, 0x72, 0x50, 0x07, 0x76, 0xa0, 0x07, 0x72,
  0x50, 0x07, 0x76, 0xd0, 0x06, 0xf6, 0x20, 0x07, 0x75, 0x60, 0x07, 0x7a,
  0x20, 0x07, 0x75, 0x60, 0x07, 0x7a, 0x20, 0x07, 0x75, 0x60, 0x07, 0x6d,
  0x60, 0x0f, 0x75, 0x10, 0x07, 0x72, 0xa0, 0x07, 0x75, 0x10, 0x07, 0x72,
  0xa0, 0x07, 0x75, 0x10, 0x07, 0x72, 0xd0, 0x06, 0xf6, 0x10, 0x07, 0x70,
  0x20, 0x07, 0x74, 0xa0, 0x07, 0x71, 0x00, 0x07, 0x72, 0x40, 0x07, 0x7a,
  0x10, 0x07, 0x70, 0x20, 0x07, 0x74, 0x30, 0x44, 0x19, 0x56, 0x21, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x60, 0x88, 0x32, 0xac, 0x42, 0x00, 0x04, 0x00,
  0x00, 0x00, 0xc0, 0x10, 0xc5, 0x58, 0x85, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x80, 0x21, 0x8a, 0xb2, 0x0a, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x43,
  0x14, 0x66, 0x15, 0x02, 0x20, 0x00, 0x00, 0x00, 0x00, 0x86, 0x28, 0x19,
  0x2b, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x51, 0x32, 0x56, 0x00,
  0x80, 0x01, 0x00, 0x00, 0x00, 0x18, 0xa2, 0x6c, 0xac, 0x00, 0x00, 0x04,
  0x00, 0x00, 0x00, 0x30, 0x44, 0xf1, 0x58, 0x01, 0x00, 0x0a, 0x00, 0x00,
  0x00, 0x20, 0x0b, 0x04, 0x07, 0x00, 0x00, 0x00, 0x32, 0x1e, 0x98, 0x10,
  0x19, 0x11, 0x4c, 0x90, 0x8c, 0x09, 0x26, 0x47, 0xc6, 0x04, 0x43, 0x02,
  0x46, 0x00, 0x28, 0x28, 0x81, 0x22, 0x28, 0x84, 0x11, 0x80, 0x32, 0x00,
  0x79, 0x18, 0x00, 0x00, 0x59, 0x02, 0x00, 0x00, 0x1a, 0x09, 0x4c, 0xd0,
  0x02, 0xe5, 0x1e, 0xc6, 0x01, 0x1d, 0xc2, 0x41, 0x1e, 0x7e, 0x61, 0x1e,
  0xd2, 0x41, 0x1f, 0xca, 0x61, 0x01, 0x8a, 0x8c, 0xc2, 0x3b, 0x90, 0x43,
  0x39, 0xc0, 0x03, 0x3b, 0x84, 0x43, 0x3e, 0x80, 0xc1, 0x28, 0xbc, 0x43,
  0x3b, 0xc0, 0x43, 0x3d, 0xd0, 0x43, 0x39, 0x8c, 0x02, 0x3c, 0xc0, 0x03,
  0x18, 0xb4, 0x01, 0x18, 0x8c, 0x42, 0x29, 0x80, 0x41, 0x1c, 0xb8, 0x01,
  0x1c, 0xb8, 0x41, 0x1c, 0x80, 0x01, 0x29, 0x94, 0x83, 0x3d, 0xa4, 0xc3,
  0x38, 0x94, 0x03, 0x18, 0x8c, 0xc2, 0x3b, 0xb4, 0x03, 0x3c, 0xa4, 0x03,
  0x3b, 0x94, 0x83, 0x3c, 0x80, 0x41, 0x1b, 0x80, 0xc1, 0x38, 0xb0, 0x43,
  0x38, 0xb8, 0xc3, 0x39, 0x80, 0x81, 0x3d, 0x94, 0x83, 0x3c, 0xcc, 0x43,
  0x3a, 0xbc, 0x83, 0x3b, 0x80, 0x81, 0x1d, 0xb8, 0x01, 0x1c, 0xb8, 0x01,
  0x1c, 0x80, 0x01, 0x1a, 0x9c, 0x43, 0x3a, 0xd0, 0x03, 0x28, 0x9c, 0x43,
  0x3a, 0xd0, 0x83, 0x1b, 0xbc, 0x83, 0x39, 0x98, 0x43, 0x3a, 0x8c, 0x43,
  0x39, 0xb8, 0xc1, 0x38, 0xbc, 0x03, 0x39, 0x94, 0x03, 0x3c, 0xb0, 0x43,
  0x38, 0xe4, 0x83, 0x1b, 0x8c, 0xc3, 0x3b, 0xb4, 0x83, 0x1e, 0xcc, 0x43,
  0x3e, 0x8c, 0x03, 0x3b, 0xbc, 0xc1, 0x38, 0xb0, 0x43, 0x38, 0xb8, 0xc3,
  0x39, 0xb8, 0xc1, 0x39, 0xa4, 0x03, 0x3d, 0x80, 0x81, 0x39, 0xdc, 0xc1,
  0x1d, 0x88, 0xc3, 0x1d, 0x8c, 0x43, 0x1c, 0x88, 0x03, 0x39, 0xc8, 0x41,
  0x1d, 0xc8, 0xc1, 0x1d, 0xdc, 0x81, 0x1d, 0x90, 0x43, 0x1d, 0x90, 0x03,
  0x1d, 0xcc, 0xc1, 0x1c, 0x8c, 0xc3, 0x1d, 0xdc, 0xc1, 0x1c, 0x84, 0x83,
  0x1d, 0xc8, 0xc1, 0x1c, 0xe4, 0x01, 0x39, 0x8c, 0x03, 0x1c, 0x8c, 0x03,
  0x1e, 0xe0, 0x01, 0x1d, 0xe4, 0x41, 0x39, 0x88, 0x43, 0x1a, 0x80, 0x01,
  0x1a, 0x9c, 0x43, 0x3a, 0xd0, 0x03, 0x28, 0x9c, 0x43, 0x3a, 0xd0, 0x83,
  0x1b, 0xbc, 0x83, 0x39, 0x98, 0x43, 0x3a, 0x8c, 0x43, 0x39, 0xb8, 0xc1,
  0x38, 0xbc, 0x03, 0x39, 0x94, 0x03, 0x3c, 0xb0, 0x43, 0x38, 0xe4, 0x83,
  0x1b, 0x8c, 0xc3, 0x3b, 0xb4, 0x83, 0x1e, 0xcc, 0x43, 0x3e, 0x8c, 0x03,
  0x3b, 0xbc, 0x01, 0x3b, 0xb0, 0x83, 0x3d, 0xb4, 0x83, 0x1b, 0x9c, 0x43,
  0x3a, 0xd0, 0x03, 0x18, 0x8c, 0x03, 0x1c, 0xd8, 0x81, 0x1c, 0xcc, 0x41,
  0x39, 0x88, 0x03, 0x39, 0xcc, 0xc1, 0x1c, 0xd4, 0x41, 0x39, 0x98, 0x03,
  0x1e, 0xd4, 0x81, 0x1d, 0x8c, 0x43, 0x38, 0xe0, 0x81, 0x39, 0x84, 0x83,
  0x1c, 0x98, 0x43, 0x1e, 0xd8, 0xc1, 0x38, 0xc4, 0x41, 0x1d, 0xc0, 0x41,
  0x1c, 0xe4, 0x01, 0x39, 0x88, 0xc3, 0x1d, 0xd8, 0x01, 0x1d, 0xc4, 0xc1,
  0x1c, 0xc8, 0xc1, 0x38, 0xa4, 0x01, 0x18, 0xa0, 0x81, 0x38, 0x84, 0xc3,
  0x3c, 0x94, 0x03, 0x39, 0x80, 0xc1, 0x3b, 0xb8, 0x03, 0x18, 0xb0, 0x02,
  0x2b, 0xd8, 0x42, 0x2b, 0x80, 0x81, 0x1d, 0xb8, 0x01, 0x1c, 0xb8, 0x01,
  0x1c, 0xcc, 0x83, 0x3d, 0xb8, 0x43, 0x1a, 0x2c, 0xa8, 0xd6, 0xa1, 0x1c,
  0xe4, 0xc1, 0x1d, 0xca, 0x81, 0x1d, 0x7e, 0x21, 0x1c, 0xe4, 0xe1, 0x1c,
  0x7e, 0x21, 0x1c, 0xc8, 0x81, 0x1c, 0xe4, 0xe1, 0x17, 0xe6, 0x01, 0x1e,
  0xc2, 0x61, 0x1c, 0xca, 0x61, 0x81, 0xb5, 0x0e, 0xe5, 0x20, 0x0f, 0xee,
  0x50, 0x0e, 0xec, 0xf0, 0x0b, 0xe1, 0x20, 0x0f, 0xe7, 0xf0, 0x0b, 0xe1,
  0x30, 0x0e, 0xe3, 0x50, 0x0e, 0xf3, 0x30, 0x0f, 0xbf, 0x10, 0x0f, 0xf5,
  0x10, 0x0e, 0xec, 0xb0, 0x80, 0x70, 0x87, 0x77, 0x70, 0x87, 0x72, 0x58,
  0xf0, 0xac, 0x43, 0x39, 0xc8, 0x83, 0x3b, 0x94, 0x03, 0x3b, 0xfc, 0x42,
  0x38, 0xc8, 0xc3, 0x39, 0xfc, 0x02, 0x3d, 0xe4, 0x03, 0x3c, 0x94, 0xc3,
  0x02, 0x6c, 0x1c, 0xd8, 0x41, 0x0f, 0xf4, 0x60, 0x1e, 0xf2, 0x61, 0x1c,
  0xd8, 0x41, 0x0f, 0xf4, 0xc0, 0x1e, 0xca, 0x61, 0x1c, 0xf8, 0xc0, 0x1c,
  0xd8, 0xe1, 0x1d, 0xc2, 0x81, 0x1e, 0xd8, 0x00, 0x0c, 0xe6, 0xc0, 0x0f,
  0xd4, 0x60, 0x01, 0x37, 0x0e, 0xec, 0xa0, 0x07, 0x7a, 0x30, 0x0f, 0xf9,
  0x30, 0x0e, 0xec, 0xa0, 0x07, 0x7a, 0x40, 0x0e, 0xe5, 0x60, 0x0f, 0xe9,
  0x30, 0x0e, 0xe5, 0xf0, 0x0b, 0xe9, 0xe0, 0x0e, 0xe4, 0x50, 0x0e, 0xf8,
  0xf0, 0x0b, 0xe1, 0x20, 0x0f, 0xf2, 0x10, 0x0e, 0xf9, 0xb0, 0xc0, 0x30,
  0x07, 0x76, 0x78, 0x87, 0x70, 0xa0, 0x07, 0x35, 0x58, 0x40, 0xad, 0x43,
  0x39, 0xc8, 0x83, 0x3b, 0x94, 0x03, 0x3b, 0xfc, 0x42, 0x38, 0xc8, 0xc3,
  0x39, 0xfc, 0x82, 0x38, 0x84, 0xc3, 0x3c, 0x94, 0xc3, 0x2f, 0xd0, 0x43,
  0x3e, 0xc0, 0x43, 0x39, 0x2c, 0xa0, 0xd6, 0xa1, 0x1c, 0xe4, 0xc1, 0x1d,
  0xca, 0x81, 0x1d, 0x7e, 0x21, 0x1c, 0xe4, 0xe1, 0x1c, 0x7e, 0x81, 0x1e,
  0xf2, 0x01, 0x1e, 0xca, 0xe1, 0x17, 0xe2, 0xa1, 0x1e, 0xc2, 0x81, 0x1d,
  0x16, 0x00, 0x0b, 0x9e, 0x75, 0x28, 0x07, 0x79, 0x70, 0x87, 0x72, 0x60,
  0x87, 0x5f, 0x08, 0x07, 0x79, 0x38, 0x87, 0x5f, 0x70, 0x87, 0x70, 0x68,
  0x87, 0x72, 0x58, 0x50, 0xb4, 0xc3, 0x2f, 0xc0, 0x03, 0x3d, 0xc8, 0xc3,
  0x82, 0xa5, 0x1d, 0x7e, 0xc1, 0x1c, 0xea, 0x81, 0x1d, 0xd8, 0x41, 0x16,
  0xc2, 0xc1, 0x1d, 0xce, 0xa1, 0x1c, 0x16, 0x14, 0xe6, 0xc0, 0x0e, 0xef,
  0x10, 0x0e, 0xf4, 0xb0, 0x60, 0x69, 0x87, 0x5f, 0xa0, 0x87, 0x74, 0x68,
  0x87, 0x72, 0xf8, 0x85, 0x79, 0xa0, 0x87, 0x72, 0x80, 0x87, 0x05, 0x48,
  0x3b, 0xfc, 0xc2, 0x3b, 0x98, 0x83, 0x39, 0xcc, 0x43, 0x39, 0xd0, 0xc3,
  0x82, 0xa3, 0x1d, 0x7e, 0x41, 0x1e, 0xc2, 0xc1, 0x1d, 0xce, 0xa1, 0x1c,
  0x16, 0xc4, 0xc4, 0x2f, 0xe8, 0x82, 0x2b, 0xac, 0x82, 0x1c, 0x8c, 0x03,
  0x3b, 0xd0, 0xc1, 0x3c, 0xe4, 0xc3, 0x38, 0xb0, 0x83, 0x1d, 0x90, 0x43,
  0x39, 0xd0, 0x43, 0x38, 0xa4, 0x03, 0x3b, 0xc4, 0x41, 0x1d, 0x84, 0xc3,
  0x38, 0x8c, 0x43, 0x39, 0xcc, 0xc3, 0x3c, 0xbc, 0x83, 0x3c, 0xfc, 0xc2,
  0x38, 0xbc, 0x43, 0x3b, 0xb4, 0xc3, 0x3b, 0xb8, 0x43, 0x2a, 0xb8, 0xc2,
  0x2c, 0xc0, 0xc1, 0x2f, 0xcc, 0x81, 0x3d, 0x94, 0xc3, 0x38, 0xa4, 0x82,
  0x39, 0xb0, 0x42, 0x3a, 0xcc, 0x41, 0x29, 0x94, 0x42, 0x29, 0xb0, 0x42,
  0x3a, 0xc4, 0x41, 0x29, 0xb0, 0x82, 0x2b, 0xcc, 0x02, 0x1c, 0xfc, 0x82,
  0x1d, 0x84, 0xc3, 0x38, 0x8c, 0x43, 0x39, 0xcc, 0xc3, 0x3c, 0xd0, 0x41,
  0x3b, 0xbc, 0x03, 0x39, 0x94, 0x43, 0x29, 0xc0, 0x41, 0x29, 0xb0, 0x82,
  0x2b, 0xcc, 0x42, 0x1d, 0xfc, 0x82, 0x1d, 0xd0, 0x43, 0x38, 0xc8, 0xc3,
  0x39, 0x94, 0x03, 0x3d, 0x94, 0x42, 0x1c, 0x94, 0x02, 0x2b, 0xb8, 0xc2,
  0x2c, 0xd4, 0xc1, 0x2f, 0xc4, 0x41, 0x1c, 0xc0, 0x03, 0x3b, 0x84, 0xc3,
  0x38, 0x94, 0x03, 0x3a, 0xbc, 0x03, 0x3b, 0x90, 0x43, 0x39, 0xc8, 0x43,
  0x29, 0xc0, 0x41, 0x29, 0x94, 0x42, 0x3a, 0xe0, 0x43, 0x2a, 0xcc, 0x02,
  0x1d, 0xfc, 0x82, 0x3d, 0x94, 0x42, 0x29, 0xfc, 0xc2, 0x2f, 0xb8, 0xc3,
  0x3c, 0xc4, 0xc1, 0x2c, 0xd0, 0xc1, 0x2f, 0xb8, 0xc2, 0x2c, 0xc0, 0xc1,
  0x2f, 0xc8, 0x41, 0x3a, 0x90, 0x43, 0x2a, 0xb0, 0x42, 0x3a, 0xc4, 0x41,
  0x29, 0x94, 0x42, 0x29, 0x2c, 0xe8, 0x89, 0x5f, 0xd0, 0x05, 0x57, 0x58,
  0x05, 0x39, 0x18, 0x07, 0x76, 0xa0, 0x83, 0x79, 0xc8, 0x87, 0x71, 0x60,
  0x07, 0x3b, 0x20, 0x87, 0x72, 0xa0, 0x87, 0x70, 0x48, 0x07, 0x76, 0x88,
  0x83, 0x3a, 0x08, 0x87, 0x71, 0x18, 0x87, 0x72, 0x98, 0x87, 0x79, 0x78,
  0x07, 0x79, 0xf8, 0x85, 0x71, 0x78, 0x87, 0x76, 0x68, 0x87, 0x77, 0x70,
  0x87, 0x54, 0x70, 0x85, 0x59, 0x80, 0x83, 0x5f, 0x98, 0x03, 0x7b, 0x28,
  0x87, 0x71, 0x48, 0x05, 0x73, 0x60, 0x85, 0x74, 0x98, 0x83, 0x52, 0x28,
  0x85, 0x52, 0x60, 0x85, 0x74, 0x88, 0x83, 0x52, 0x60, 0x05, 0x57, 0x98,
  0x05, 0x38, 0xf8, 0x05, 0x3b, 0x08, 0x87, 0x71, 0x18, 0x87, 0x72, 0x98,
  0x87, 0x79, 0xa0, 0x83, 0x76, 0x78, 0x07, 0x72, 0x28, 0x87, 0x52, 0x80,
  0x83, 0x52, 0x60, 0x05, 0x57, 0x98, 0x85, 0x3a, 0xf8, 0x05, 0x3b, 0xa0,
  0x87, 0x70, 0x90, 0x87, 0x73, 0x28, 0x07, 0x7a, 0x28, 0x85, 0x38, 0x28,
  0x05, 0x56, 0x70, 0x85, 0x59, 0xa8, 0x83, 0x5f, 0x88, 0x83, 0x38, 0x80,
  0x07, 0x76, 0x08, 0x87, 0x71, 0x28, 0x07, 0x74, 0x78, 0x07, 0x76, 0x20,
  0x87, 0x72, 0x90, 0x87, 0x52, 0x80, 0x83, 0x52, 0x28, 0x85, 0x74, 0xc0,
  0x87, 0x54, 0x98, 0x05, 0x3a, 0xf8, 0x05, 0x7b, 0x28, 0x85, 0x52, 0xf8,
  0x85, 0x5f, 0x70, 0x87, 0x79, 0x88, 0x83, 0x59, 0xa0, 0x83, 0x5f, 0x70,
  0x85, 0x59, 0x80, 0x83, 0x5f, 0x90, 0x83, 0x74, 0x20, 0x87, 0x54, 0x60,
  0x85, 0x74, 0x88, 0x83, 0x52, 0x28, 0x85, 0x52, 0xd0, 0x03, 0x30, 0x08,
  0x07, 0x79, 0x38, 0x87, 0x7a, 0x68, 0x87, 0x72, 0x70, 0x07, 0x7a, 0x00,
  0x03, 0x38, 0x58, 0x40, 0x12, 0xbf, 0xa0, 0x0b, 0xae, 0xb0, 0x0a, 0x72,
  0x30, 0x0e, 0xec, 0x40, 0x07, 0xf3, 0x90, 0x0f, 0xe3, 0xc0, 0x0e, 0x76,
  0x40, 0x0e, 0xe5, 0x40, 0x0f, 0xe1, 0x90, 0x0e, 0xec, 0x10, 0x07, 0x75,
  0x10, 0x0e, 0xe3, 0x30, 0x0e, 0xe5, 0x30, 0x0f, 0xf3, 0xf0, 0x0e, 0xf2,
  0xf0, 0x0b, 0xe3, 0xf0, 0x0e, 0xed, 0xd0, 0x0e, 0xef, 0xe0, 0x0e, 0xa9,
  0xe0, 0x0a, 0xb3, 0x00, 0x07, 0xbf, 0x30, 0x07, 0xf6, 0x50, 0x0e, 0xe3,
  0x90, 0x0a, 0xe6, 0xc0, 0x0a, 0xe9, 0x30, 0x07, 0xa5, 0x50, 0x0a, 0xa5,
  0xc0, 0x0a, 0xe9, 0x10, 0x07, 0xa5, 0xc0, 0x0a, 0xae, 0x30, 0x0b, 0x70,
  0xf0, 0x0b, 0x76, 0x10, 0x0e, 0xe3, 0x30, 0x0e, 0xe5, 0x30, 0x0f, 0xf3,
  0x40, 0x07, 0xed, 0xf0, 0x0e, 0xe4, 0x50, 0x0e, 0xa5, 0x00, 0x07, 0xa5,
  0xc0, 0x0a, 0xae, 0x30, 0x0b, 0x75, 0xf0, 0x0b, 0x76, 0x40, 0x0f, 0xe1,
  0x20, 0x0f, 0xe7, 0x50, 0x0e, 0xf4, 0x50, 0x0a, 0x71, 0x50, 0x0a, 0xac,
  0xe0, 0x0a, 0xb3, 0x50, 0x07, 0xbf, 0x10, 0x07, 0x71, 0x00, 0x0f, 0xec,
  0x10, 0x0e, 0xe3, 0x50, 0x0e, 0xe8, 0xf0, 0x0e, 0xec, 0x40, 0x0e, 0xe5,
  0x20, 0x0f, 0xa5, 0x00, 0x07, 0xa5, 0x50, 0x0a, 0xe9, 0x80, 0x0f, 0xa9,
  0x30, 0x0b, 0x74, 0xf0, 0x0b, 0xf6, 0x50, 0x0a, 0xa5, 0xf0, 0x0b, 0xbf,
  0xe0, 0x0e, 0xf3, 0x10, 0x07, 0xb3, 0x40, 0x07, 0xbf, 0xd0, 0x0e, 0x0b,
  0x60, 0xe2, 0x17, 0x74, 0xc1, 0x15, 0x56, 0x41, 0x0e, 0xc6, 0x81, 0x1d,
  0xe8, 0x60, 0x1e, 0xf2, 0x61, 0x1c, 0xd8, 0xc1, 0x0e, 0xc8, 0xa1, 0x1c,
  0xe8, 0x21, 0x1c, 0xd2, 0x81, 0x1d, 0xe2, 0xa0, 0x0e, 0xc2, 0x61, 0x1c,
  0xc6, 0xa1, 0x1c, 0xe6, 0x61, 0x1e, 0xde, 0x41, 0x1e, 0x7e, 0x61, 0x1c,
  0xde, 0xa1, 0x1d, 0xda, 0xe1, 0x1d, 0xdc, 0x21, 0x15, 0x5c, 0x61, 0x16,
  0xe0, 0xe0, 0x17, 0xe6, 0xc0, 0x1e, 0xca, 0x61, 0x1c, 0x52, 0xc1, 0x1c,
  0x58, 0x21, 0x1d, 0xe6, 0xa0, 0x14, 0x4a, 0xa1, 0x14, 0x58, 0x21, 0x1d,
  0xe2, 0xa0, 0x14, 0x58, 0xc1, 0x15, 0x66, 0x01, 0x0e, 0x7e, 0xc1, 0x0e,
  0xc2, 0x61, 0x1c, 0xc6, 0xa1, 0x1c, 0xe6, 0x61, 0x1e, 0xe8, 0xa0, 0x1d,
  0xde, 0x81, 0x1c, 0xca, 0xa1, 0x14, 0xe0, 0xa0, 0x14, 0x58, 0xc1, 0x15,
  0x66, 0xa1, 0x0e, 0x7e, 0xc1, 0x0e, 0xe8, 0x21, 0x1c, 0xe4, 0xe1, 0x1c,
  0xca, 0x81, 0x1e, 0x4a, 0x21, 0x0e, 0x4a, 0x81, 0x15, 0x5c, 0x61, 0x16,
  0xea, 0xe0, 0x17, 0xe2, 0x20, 0x0e, 0xe0, 0x81, 0x1d, 0xc2, 0x61, 0x1c,
  0xca, 0x01, 0x1d, 0xde, 0x81, 0x1d, 0xc8, 0xa1, 0x1c, 0xe4, 0xa1, 0x14,
  0xe0, 0xa0, 0x14, 0x4a, 0x21, 0x1d, 0xf0, 0x21, 0x15, 0x66, 0x81, 0x0e,
  0x7e, 0xc1, 0x1e, 0x4a, 0xa1, 0x14, 0x7e, 0xe1, 0x17, 0xdc, 0x61, 0x1e,
  0xe2, 0x60, 0x16, 0xe8, 0xe0, 0x17, 0xda, 0x41, 0x0f, 0xc0, 0x20, 0x1c,
  0xe4, 0xe1, 0x1c, 0xea, 0xa1, 0x1d, 0xca, 0xc1, 0x1d, 0xe8, 0x01, 0x0c,
  0xe0, 0x60, 0xc1, 0xf3, 0x0e, 0xed, 0xe0, 0x0e, 0xe9, 0x00, 0x0f, 0xef,
  0x40, 0x0f, 0xe5, 0xe0, 0x0e, 0xf4, 0x00, 0x06, 0xe3, 0x80, 0x0e, 0xe1,
  0x20, 0x0f, 0x0b, 0x9e, 0x59, 0x48, 0x87, 0x76, 0x80, 0x07, 0x76, 0x28,
  0x07, 0x30, 0x18, 0x85, 0x35, 0x58, 0x03, 0x30, 0xa0, 0x05, 0x51, 0x08,
  0x85, 0x50, 0x18, 0x22, 0x7c, 0xd9, 0x10, 0xe1, 0xd3, 0x86, 0x08, 0xdf,
  0x36, 0x44, 0xf8, 0xb8, 0x21, 0xc2, 0xd7, 0x0d, 0x11, 0x3e, 0x6f, 0x88,
  0xf0, 0x7d, 0x43, 0x84, 0x0f, 0x0c, 0x86, 0x08, 0x5f, 0x18, 0x0c, 0x11,
  0x3e, 0x31, 0x18, 0x22, 0x10, 0xc0, 0x10, 0x81, 0x00, 0x86, 0x08, 0x04,
  0x30, 0x84, 0x08, 0x94, 0x60, 0x19, 0x02, 0x0c, 0x31, 0x02, 0xe5, 0x03,
  0x02, 0x66, 0x88, 0xf0, 0x05, 0x43, 0x9c, 0x4f, 0x08, 0x94, 0xa0, 0x09,
  0x94, 0xa0, 0x09, 0x94, 0xa0, 0x19, 0xe2, 0x7c, 0xc3, 0x47, 0x7c, 0xc4,
  0x47, 0x7c, 0xc4, 0x47, 0x7c, 0xc4, 0x10, 0xe7, 0x2b, 0x3e, 0xe3, 0x3b,
  0x3e, 0xe4, 0x3b, 0x3e, 0xe3, 0x3b, 0x86, 0x38, 0x5f, 0xf2, 0x19, 0xdf,
  0xf1, 0x21, 0xdf, 0xf1, 0x19, 0xdf, 0x31, 0xc4, 0xf9, 0x94, 0x6f, 0xf9,
  0x96, 0x6f, 0xf9, 0x96, 0x6f, 0xf9, 0x96, 0x21, 0xce, 0xc7, 0x7c, 0xcd,
  0xe7, 0x7c, 0xcd, 0xe7, 0x7c, 0xcd, 0xe7, 0x0c, 0x71, 0xb2, 0xe2, 0x53,
  0x83, 0x6f, 0x0d, 0x3e, 0x36, 0xf8, 0xda, 0xe0, 0x73, 0x83, 0xef, 0x0d,
  0x86, 0x38, 0x99, 0xf1, 0xa9, 0xc1, 0xb7, 0x06, 0x1f, 0x1b, 0x7c, 0x6d,
  0xf0, 0xb9, 0xc1, 0xf7, 0x06, 0x43, 0xa0, 0x4f, 0x08, 0x94, 0xa0, 0x09,
  0x94, 0xa0, 0x09, 0x94, 0xa0, 0x09, 0x9a, 0x21, 0xd0, 0x37, 0x7c, 0xc4,
  0x47, 0x7c, 0xc4, 0x47, 0x7c, 0xc4, 0x47, 0x7c, 0xc4, 0x10, 0xe8, 0x2b,
  0x3e, 0xe3, 0x3b, 0x3e, 0xe3, 0x3b, 0x3e, 0xe3, 0x3b, 0xbe, 0x67, 0x08,
  0xf4, 0x25, 0x9f, 0xf1, 0x1d, 0x9f, 0xf1, 0x1d, 0x9f, 0xf1, 0x1d, 0xdf,
  0x33, 0x04, 0xfa, 0x94, 0x6f, 0xf9, 0x96, 0x6f, 0xf9, 0x96, 0x6f, 0xf9,
  0x96, 0x6f, 0x19, 0x02, 0x7d, 0xcc, 0xd7, 0x7c, 0xce, 0xd7, 0x7c, 0xce,
  0xd7, 0x7c, 0xce, 0x07, 0x0d, 0x71, 0xb6, 0xe3, 0x93, 0x83, 0x6f, 0x0e,
  0x3e, 0x3a, 0xf8, 0xea, 0xe0, 0xb3, 0x83, 0xef, 0x0e, 0x86, 0x38, 0x9f,
  0x10, 0x38, 0x81, 0x13, 0x28, 0x81, 0x12, 0x28, 0x41, 0x33, 0xc4, 0xf9,
  0x8a, 0xcf, 0xf8, 0x8c, 0xcf, 0xf8, 0x8c, 0xcf, 0xf8, 0x9e, 0x21, 0xce,
  0x97, 0x7c, 0xc6, 0x67, 0x7c, 0xc6, 0x67, 0x7c, 0xc6, 0xf7, 0x0c, 0x71,
  0x3e, 0xe6, 0x6b, 0xbe, 0xe6, 0x6b, 0xbe, 0xe6, 0x6b, 0x3e, 0x68, 0x88,
  0xe3, 0x21, 0x5f, 0x1e, 0x7c, 0x6b, 0xf0, 0xe9, 0xc1, 0xb7, 0x07, 0x9f,
  0x1b, 0x7c, 0x7c, 0x30, 0x04, 0x0b, 0x94, 0xa0, 0x09, 0x9a, 0xa0, 0x09,
  0x94, 0xa0, 0x09, 0x9a, 0xa0, 0x09, 0x94, 0xa0, 0x09, 0x9a, 0xa0, 0x19,
  0x82, 0x7d, 0xc4, 0x47, 0x7c, 0xc4, 0x47, 0x7c, 0xc4, 0x47, 0x7c, 0xc4,
  0x47, 0x7c, 0xc4, 0x47, 0x7c, 0xc4, 0x47, 0x0c, 0xc1, 0x3e, 0xe3, 0x3b,
  0xbe, 0xe3, 0x3b, 0x3e, 0xe4, 0x3b, 0xbe, 0xe3, 0x3b, 0x3e, 0xe3, 0x3b,
  0xbe, 0xe3, 0x3b, 0x86, 0x60, 0xdf, 0xf2, 0x2d, 0xdf, 0xf2, 0x2d, 0xdf,
  0xf2, 0x2d, 0xdf, 0xf2, 0x2d, 0xdf, 0xf2, 0x2d, 0xdf, 0xf2, 0x2d, 0x43,
  0xb0, 0xaf, 0xf9, 0xa2, 0x4f, 0xfa, 0x9c, 0xaf, 0xf9, 0xa2, 0x4f, 0xfa,
  0x9c, 0xaf, 0xf9, 0xa2, 0x4f, 0xfa, 0x9c, 0x21, 0xc2, 0x87, 0x0d, 0x31,
  0xbe, 0xeb, 0x1b, 0x05, 0x20, 0x19, 0x62, 0x7c, 0xcf, 0x47, 0x0a, 0x40,
  0x32, 0xc4, 0xf8, 0x4a, 0xe1, 0x2b, 0x05, 0x20, 0x19, 0x62, 0x7c, 0xa4,
  0xf0, 0x91, 0x02, 0x90, 0x70, 0x7a, 0x83, 0x2b, 0x73, 0x1b, 0x63, 0x73,
  0x99, 0x83, 0x4b, 0x93, 0x73, 0xb1, 0x2b, 0x93, 0x9b, 0x4b, 0x7b, 0x73,
  0x9b, 0x12, 0x98, 0x01, 0xa5, 0x37, 0xb8, 0x32, 0xb7, 0x31, 0x36, 0x97,
  0xb7, 0x31, 0x36, 0x17, 0xbb, 0x32, 0xb9, 0xb9, 0xb4, 0x37, 0xb7, 0x29,
  0x81, 0x19, 0x50, 0x0c, 0xde, 0xe0, 0xca, 0xdc, 0xc6, 0xd8, 0x5c, 0xea,
  0xe6, 0xca, 0xc8, 0x5c, 0xde, 0xe0, 0xe8, 0xd2, 0xde, 0xdc, 0xc2, 0xd8,
  0x5c, 0xc6, 0xde, 0xe4, 0xca, 0x5c, 0xcc, 0xca, 0xc2, 0xe8, 0xea, 0xe4,
  0xca, 0xe6, 0xa6, 0x04, 0x67, 0x40, 0xeb, 0x0d, 0xae, 0xcc, 0x6d, 0x8c,
  0xcd, 0xa5, 0x6e, 0xae, 0x8c, 0xcc, 0xa5, 0x0c, 0x8f, 0xae, 0xcc, 0x6d,
  0x2e, 0xed, 0xcd, 0x6d, 0x6e, 0x4a, 0x70, 0x06, 0xbc, 0xde, 0xe0, 0xca,
  0xdc, 0xc6, 0xd8, 0x5c, 0xc6, 0xde, 0xda, 0xe0, 0xd2, 0xd8, 0xca, 0xe4,
  0x5c, 0xde, 0xe0, 0xe8, 0xd2, 0xde, 0xdc, 0xe6, 0xa6, 0x04, 0x67, 0x40,
  0x67, 0x2e, 0x6f, 0x8c, 0xcd, 0x25, 0x6c, 0x0e, 0xee, 0x8b, 0xed, 0x6d,
  0x2c, 0x8c, 0x6d, 0xca, 0x30, 0x06, 0x64, 0x50, 0x06, 0x8c, 0xd8, 0xd8,
  0xec, 0xda, 0x5c, 0xda, 0xde, 0xc8, 0xea, 0xd8, 0xca, 0x5c, 0xcc, 0xd8,
  0xc2, 0xce, 0xe6, 0xa6, 0x04, 0x68, 0x40, 0x85, 0x8d, 0xcd, 0xae, 0xcd,
  0x25, 0x8d, 0xac, 0xcc, 0x8d, 0x6e, 0x4a, 0x90, 0x06, 0x74, 0xde, 0xe0,
  0xca, 0xdc, 0xc6, 0xd8, 0x5c, 0xd6, 0xca, 0xe4, 0xdc, 0xca, 0xd8, 0xe6,
  0xa6, 0x10, 0x70, 0x10, 0x07, 0x78, 0xd0, 0x07, 0x00, 0x00, 0x00, 0x00,
  0x79, 0x18, 0x00, 0x00, 0xa2, 0x00, 0x00, 0x00, 0x33, 0x08, 0x80, 0x1c,
  0xc4, 0xe1, 0x1c, 0x66, 0x14, 0x01, 0x3d, 0x88, 0x43, 0x38, 0x84, 0xc3,
  0x8c, 0x42, 0x80, 0x07, 0x79, 0x78, 0x07, 0x73, 0x98, 0x71, 0x0c, 0xe6,
  0x00, 0x0f, 0xed, 0x10, 0x0e, 0xf4, 0x80, 0x0e, 0x33, 0x0c, 0x42, 0x1e,
  0xc2, 0xc1, 0x1d, 0xce, 0xa1, 0x1c, 0x66, 0x30, 0x05, 0x3d, 0x88, 0x43,
  0x38, 0x84, 0x83, 0x1b, 0xcc, 0x03, 0x3d, 0xc8, 0x43, 0x3d, 0x8c, 0x03,
  0x3d, 0xcc, 0x78, 0x8c, 0x74, 0x70, 0x07, 0x7b, 0x08, 0x07, 0x79, 0x48,
  0x87, 0x70, 0x70, 0x07, 0x7a, 0x70, 0x03, 0x76, 0x78, 0x87, 0x70, 0x20,
  0x87, 0x19, 0xcc, 0x11, 0x0e, 0xec, 0x90, 0x0e, 0xe1, 0x30, 0x0f, 0x6e,
  0x30, 0x0f, 0xe3, 0xf0, 0x0e, 0xf0, 0x50, 0x0e, 0x33, 0x10, 0xc4, 0x1d,
  0xde, 0x21, 0x1c, 0xd8, 0x21, 0x1d, 0xc2, 0x61, 0x1e, 0x66, 0x30, 0x89,
  0x3b, 0xbc, 0x83, 0x3b, 0xd0, 0x43, 0x39, 0xb4, 0x03, 0x3c, 0xbc, 0x83,
  0x3c, 0x84, 0x03, 0x3b, 0xcc, 0xf0, 0x14, 0x76, 0x60, 0x07, 0x7b, 0x68,
  0x07, 0x37, 0x68, 0x87, 0x72, 0x68, 0x07, 0x37, 0x80, 0x87, 0x70, 0x90,
  0x87, 0x70, 0x60, 0x07, 0x76, 0x28, 0x07, 0x76, 0xf8, 0x05, 0x76, 0x78,
  0x87, 0x77, 0x80, 0x87, 0x5f, 0x08, 0x87, 0x71, 0x18, 0x87, 0x72, 0x98,
  0x87, 0x79, 0x98, 0x81, 0x2c, 0xee, 0xf0, 0x0e, 0xee, 0xe0, 0x0e, 0xf5,
  0xc0, 0x0e, 0xec, 0x30, 0x03, 0x62, 0xc8, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c,
  0xcc, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xdc, 0x61, 0x1c, 0xca, 0x21, 0x1c,
  0xc4, 0x81, 0x1d, 0xca, 0x61, 0x06, 0xd6, 0x90, 0x43, 0x39, 0xc8, 0x43,
  0x39, 0x98, 0x43, 0x39, 0xc8, 0x43, 0x39, 0xb8, 0xc3, 0x38, 0x94, 0x43,
  0x38, 0x88, 0x03, 0x3b, 0x94, 0xc3, 0x2f, 0xbc, 0x83, 0x3c, 0xfc, 0x82,
  0x3b, 0xd4, 0x03, 0x3b, 0xb0, 0xc3, 0x0c, 0xc7, 0x69, 0x87, 0x70, 0x58,
  0x87, 0x72, 0x70, 0x83, 0x74, 0x68, 0x07, 0x78, 0x60, 0x87, 0x74, 0x18,
  0x87, 0x74, 0xa0, 0x87, 0x19, 0xce, 0x53, 0x0f, 0xee, 0x00, 0x0f, 0xf2,
  0x50, 0x0e, 0xe4, 0x90, 0x0e, 0xe3, 0x40, 0x0f, 0xe1, 0x20, 0x0e, 0xec,
  0x50, 0x0e, 0x33, 0x20, 0x28, 0x1d, 0xdc, 0xc1, 0x1e, 0xc2, 0x41, 0x1e,
  0xd2, 0x21, 0x1c, 0xdc, 0x81, 0x1e, 0xdc, 0xe0, 0x1c, 0xe4, 0xe1, 0x1d,
  0xea, 0x01, 0x1e, 0x66, 0x18, 0x51, 0x38, 0xb0, 0x43, 0x3a, 0x9c, 0x83,
  0x3b, 0xcc, 0x50, 0x24, 0x76, 0x60, 0x07, 0x7b, 0x68, 0x07, 0x37, 0x60,
  0x87, 0x77, 0x78, 0x07, 0x78, 0x98, 0x51, 0x4c, 0xf4, 0x90, 0x0f, 0xf0,
  0x50, 0x0e, 0x33, 0x1e, 0x6a, 0x1e, 0xca, 0x61, 0x1c, 0xe8, 0x21, 0x1d,
  0xde, 0xc1, 0x1d, 0x7e, 0x01, 0x1e, 0xe4, 0xa1, 0x1c, 0xcc, 0x21, 0x1d,
  0xf0, 0x61, 0x06, 0x54, 0x85, 0x83, 0x38, 0xcc, 0xc3, 0x3b, 0xb0, 0x43,
  0x3d, 0xd0, 0x43, 0x39, 0xfc, 0xc2, 0x3c, 0xe4, 0x43, 0x3b, 0x88, 0xc3,
  0x3b, 0xb0, 0xc3, 0x8c, 0xc5, 0x0a, 0x87, 0x79, 0x98, 0x87, 0x77, 0x18,
  0x87, 0x74, 0x08, 0x07, 0x7a, 0x28, 0x07, 0x72, 0x98, 0x81, 0x5c, 0xe3,
  0x10, 0x0e, 0xec, 0xc0, 0x0e, 0xe5, 0x50, 0x0e, 0xf3, 0x30, 0x23, 0xc1,
  0xd2, 0x41, 0x1e, 0xe4, 0xe1, 0x17, 0xd8, 0xe1, 0x1d, 0xde, 0x01, 0x1e,
  0x66, 0x58, 0xd9, 0x3a, 0x94, 0x83, 0x3c, 0xb8, 0x43, 0x39, 0xb0, 0xc3,
  0x2f, 0x84, 0x83, 0x3c, 0x9c, 0xc3, 0x2f, 0x84, 0x03, 0x39, 0x90, 0x83,
  0x3c, 0xfc, 0xc2, 0x3c, 0xc0, 0x43, 0x38, 0x8c, 0x43, 0x39, 0xcc, 0xb8,
  0xb4, 0x75, 0x28, 0x07, 0x79, 0x70, 0x87, 0x72, 0x60, 0x87, 0x5f, 0x08,
  0x07, 0x79, 0x38, 0x87, 0x5f, 0x08, 0x87, 0x71, 0x18, 0x87, 0x72, 0x98,
  0x87, 0x79, 0xf8, 0x85, 0x78, 0xa8, 0x87, 0x70, 0x60, 0x87, 0x19, 0xd0,
  0xb6, 0x0e, 0xe5, 0x20, 0x0f, 0xee, 0x50, 0x0e, 0xec, 0xf0, 0x0b, 0xe1,
  0x20, 0x0f, 0xe7, 0xf0, 0x0b, 0xf4, 0x90, 0x0f, 0xf0, 0x50, 0x0e, 0x33,
  0x2a, 0x6e, 0x1d, 0xca, 0x41, 0x1e, 0xdc, 0xa1, 0x1c, 0xd8, 0xe1, 0x17,
  0xc2, 0x41, 0x1e, 0xce, 0xe1, 0x17, 0xc4, 0x21, 0x1c, 0xe6, 0xa1, 0x1c,
  0x7e, 0x81, 0x1e, 0xf2, 0x01, 0x1e, 0xca, 0x61, 0x46, 0xd5, 0xad, 0x43,
  0x39, 0xc8, 0x83, 0x3b, 0x94, 0x03, 0x3b, 0xfc, 0x42, 0x38, 0xc8, 0xc3,
  0x39, 0xfc, 0x02, 0x3d, 0xe4, 0x03, 0x3c, 0x94, 0xc3, 0x2f, 0xc4, 0x43,
  0x3d, 0x84, 0x03, 0x3b, 0xcc, 0x80, 0xbc, 0x75, 0x28, 0x07, 0x79, 0x70,
  0x87, 0x72, 0x60, 0x87, 0x5f, 0x08, 0x07, 0x79, 0x38, 0x87, 0x5f, 0x70,
  0x87, 0x70, 0x68, 0x87, 0x72, 0x00, 0x00, 0x00, 0x71, 0x20, 0x00, 0x00,
  0x38, 0x00, 0x00, 0x00, 0x76, 0x00, 0x07, 0xac, 0xcc, 0x95, 0xbf, 0xb0,
  0x00, 0x92, 0xf4, 0x2b, 0x44, 0xd4, 0x10, 0x8b, 0xf4, 0xff, 0x62, 0x33,
  0x11, 0x46, 0x04, 0x4c, 0xc4, 0xe6, 0x0c, 0x18, 0x49, 0x44, 0x0d, 0xb1,
  0xfc, 0xf5, 0xff, 0xe3, 0x74, 0xaf, 0xff, 0x16, 0x20, 0xfd, 0x73, 0x7d,
  0x1b, 0xc4, 0xf4, 0x1b, 0x8b, 0x13, 0x00, 0xcb, 0x8f, 0x0c, 0x89, 0x0d,
  0x38, 0xff, 0xac, 0x2f, 0x44, 0x63, 0x4c, 0x47, 0x57, 0xdd, 0x7f, 0x61,
  0x06, 0x6f, 0xc0, 0xca, 0x5c, 0xf9, 0x0b, 0x0b, 0x20, 0x49, 0xbf, 0x42,
  0x44, 0x0d, 0xb1, 0x48, 0xff, 0xcf, 0x39, 0xcc, 0x43, 0x4d, 0xc4, 0xe7,
  0x44, 0x02, 0x41, 0x12, 0x51, 0x43, 0x2c, 0xbf, 0xfd, 0xff, 0x38, 0xdd,
  0xeb, 0xbf, 0x11, 0x44, 0xff, 0xdc, 0x37, 0x4e, 0xc4, 0x00, 0x0b, 0x92,
  0x11, 0x5d, 0x75, 0xff, 0x85, 0x01, 0x44, 0xff, 0x5c, 0xdb, 0x06, 0x31,
  0xfd, 0x8b, 0x23, 0x00, 0xcb, 0x8f, 0x0c, 0x89, 0x15, 0xbc, 0x01, 0x2b,
  0x73, 0xe5, 0x2f, 0x2c, 0x80, 0x24, 0xfd, 0x0a, 0x11, 0x35, 0xc4, 0x22,
  0xfd, 0x3f, 0xe7, 0x30, 0x0f, 0x35, 0x11, 0x9f, 0x13, 0x09, 0x04, 0x49,
  0x44, 0x0d, 0xb1, 0xfc, 0xf5, 0xff, 0xe3, 0x74, 0xaf, 0xff, 0x26, 0xb0,
  0xfc, 0xf3, 0x1e, 0x00, 0x51, 0x84, 0x10, 0x51, 0x62, 0x08, 0x70, 0xc0,
  0xca, 0x5c, 0xf9, 0x0b, 0x0b, 0x20, 0x49, 0xbf, 0x42, 0x44, 0x0d, 0xb1,
  0x48, 0xff, 0x2f, 0x36, 0x13, 0x61, 0x44, 0xc0, 0x44, 0x6c, 0xce, 0x80,
  0x91, 0x44, 0xd4, 0x10, 0xcb, 0x6f, 0xff, 0x3f, 0x4e, 0xf7, 0xfa, 0x0f,
  0x61, 0x20, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00, 0x13, 0x04, 0x45, 0x2c,
  0x10, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x04, 0x94, 0x40, 0x11,
  0x50, 0x30, 0x03, 0x50, 0x80, 0x40, 0x44, 0x8e, 0x35, 0x00, 0x81, 0x30,
  0x02, 0x40, 0xe6, 0x1c, 0x44, 0xa3, 0x2c, 0x17, 0x1d, 0x23, 0x00, 0x33,
  0x00, 0x63, 0x04, 0x20, 0x08, 0x82, 0xf8, 0x37, 0x46, 0x00, 0xc3, 0xe4,
  0xda, 0x82, 0x01, 0x21, 0x33, 0x00, 0x14, 0xce, 0x41, 0x70, 0x1c, 0xd7,
  0xcd, 0x00, 0x00, 0x00, 0xf1, 0x30, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,
  0x43, 0x88, 0x0f, 0x15, 0xbe, 0x69, 0x88, 0xf1, 0xa5, 0xc2, 0x87, 0x0a,
  0x1f, 0x35, 0x84, 0xf8, 0x54, 0xe1, 0xab, 0x86, 0x18, 0xdf, 0x2a, 0x7c,
  0xaa, 0xf0, 0x59, 0x43, 0x84, 0x2f, 0x15, 0x86, 0x08, 0xdf, 0x2a, 0x00,
  0xe3, 0x11, 0x50, 0xd2, 0x54, 0x34, 0x06, 0x63, 0x3c, 0x02, 0x4a, 0x1a,
  0x8b, 0xca, 0x60, 0x8c, 0x47, 0x48, 0x49, 0x53, 0xd1, 0x19, 0x8c, 0xf1,
  0x08, 0x29, 0x69, 0x2c, 0x4a, 0x83, 0x31, 0x1e, 0x41, 0x25, 0x4d, 0x45,
  0x6b, 0x30, 0xc6, 0x23, 0xa8, 0xa4, 0xb1, 0xa8, 0x0d, 0xc6, 0x88, 0x01,
  0x61, 0xdc, 0x44, 0xd0, 0x1c, 0x19, 0x00, 0x72, 0x66, 0x00, 0x88, 0xc5,
  0x01, 0x1c, 0x88, 0xa0, 0xe4, 0xe0, 0x0d, 0x64, 0x3c, 0xe1, 0x99, 0x83,
  0xa3, 0x03, 0x71, 0xa9, 0x0e, 0xca, 0xa1, 0x01, 0x20, 0xa7, 0x06, 0x80,
  0x18, 0x1e, 0xdc, 0x81, 0x08, 0x2a, 0x0f, 0xde, 0x40, 0xc6, 0x13, 0x22,
  0x3d, 0x98, 0x25, 0x08, 0x06, 0x2a, 0x82, 0x06, 0xa0, 0x85, 0x61, 0xa0,
  0x22, 0x0c, 0xc2, 0x00, 0x98, 0x85, 0xe1, 0xf8, 0x00, 0x88, 0xf1, 0x84,
  0xc7, 0x0f, 0xee, 0x0f, 0xc4, 0x25, 0x50, 0x28, 0x15, 0x0a, 0x76, 0x10,
  0x83, 0x0c, 0xa2, 0x20, 0x06, 0xd9, 0x88, 0x01, 0x61, 0xdc, 0xc4, 0x30,
  0x0a, 0xc3, 0x0d, 0xa4, 0xe0, 0x09, 0xb3, 0x0c, 0xc2, 0x50, 0x0a, 0x23,
  0x06, 0x84, 0x71, 0x13, 0xc4, 0x28, 0x8c, 0x27, 0x44, 0x7e, 0x40, 0xa7,
  0x30, 0x68, 0x0f, 0x46, 0xa1, 0x42, 0x2a, 0x48, 0xa9, 0xc2, 0x27, 0x45,
  0x0a, 0xa4, 0x20, 0xb5, 0x0a, 0xac, 0x40, 0x73, 0x0c, 0x60, 0xd0, 0x0a,
  0xcd, 0x20, 0x83, 0x2b, 0x80, 0x81, 0x56, 0xa6, 0xf0, 0x0a, 0x32, 0xc8,
  0x00, 0x0b, 0x60, 0xb0, 0x55, 0x1f, 0xc4, 0x02, 0xcc, 0x12, 0x0c, 0x03,
  0x15, 0x61, 0x20, 0x0b, 0x42, 0x1f, 0x04, 0xc6, 0x07, 0x0a, 0x0c, 0x86,
  0x1b, 0x68, 0x01, 0x23, 0x83, 0x59, 0x86, 0x80, 0xa8, 0x85, 0x63, 0x03,
  0x40, 0xce, 0x0d, 0x00, 0xa9, 0x37, 0xb0, 0x05, 0x29, 0x5c, 0xb8, 0x05,
  0x19, 0x4f, 0x98, 0x72, 0xe1, 0x74, 0x41, 0xdc, 0xc1, 0x88, 0x5d, 0x98,
  0x85, 0x02, 0xc0, 0x80, 0x18, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
  0x5b, 0x86, 0x09, 0x61, 0x85, 0x2d, 0xc3, 0x87, 0xb4, 0xc2, 0x96, 0xe1,
  0x0c, 0x02, 0x53, 0xd8, 0x32, 0xa0, 0x41, 0x60, 0x0a, 0x5b, 0x86, 0x3e,
  0x08, 0x4e, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x61, 0x20, 0x00, 0x00,
  0x69, 0x00, 0x00, 0x00, 0x13, 0x04, 0x45, 0x2c, 0x10, 0x00, 0x00, 0x00,
  0x0e, 0x00, 0x00, 0x00, 0x04, 0x94, 0x40, 0x11, 0x50, 0x30, 0x03, 0x50,
  0x80, 0x40, 0x44, 0x8e, 0x35, 0x00, 0x81, 0x30, 0x02, 0x40, 0xe6, 0x1c,
  0x44, 0xa3, 0x2c, 0x17, 0x1d, 0x23, 0x00, 0x33, 0x00, 0x63, 0x04, 0x20,
  0x08, 0x82, 0xf8, 0x37, 0x46, 0x00, 0xc3, 0xe4, 0xda, 0x82, 0x01, 0x21,
  0x33, 0x00, 0x14, 0xce, 0x41, 0x70, 0x1c, 0xd7, 0xcd, 0x00, 0x00, 0x00,
  0xf1, 0x30, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x43, 0x88, 0x0f, 0x15,
  0xbe, 0x69, 0x88, 0xf1, 0xa5, 0xc2, 0x87, 0x0a, 0x1f, 0x35, 0x84, 0xf8,
  0x54, 0xe1, 0xab, 0x86, 0x18, 0xdf, 0x2a, 0x7c, 0xaa, 0xf0, 0x59, 0x43,
  0x84, 0x2f, 0x15, 0x86, 0x08, 0xdf, 0x2a, 0x00, 0xe3, 0x11, 0x50, 0xd2,
  0x54, 0x34, 0x06, 0x63, 0x3c, 0x02, 0x4a, 0x1a, 0x8b, 0xca, 0x60, 0x8c,
  0x47, 0x48, 0x49, 0x53, 0xd1, 0x19, 0x8c, 0xf1, 0x08, 0x29, 0x69, 0x2c,
  0x4a, 0x83, 0x31, 0x1e, 0x41, 0x25, 0x4d, 0x45, 0x6b, 0x30, 0xc6, 0x23,
  0xa8, 0xa4, 0xb1, 0xa8, 0x0d, 0xc6, 0x88, 0x01, 0x61, 0xdc, 0x44, 0xd0,
  0x1c, 0x19, 0x00, 0x72, 0x66, 0x00, 0x88, 0xc5, 0x01, 0x1c, 0x88, 0xa0,
  0xe4, 0xe0, 0x0d, 0x64, 0x3c, 0xe1, 0x99, 0x83, 0xa3, 0x03, 0x71, 0xa9,
  0x0e, 0xca, 0xa1, 0x01, 0x20, 0xa7, 0x06, 0x80, 0x18, 0x1e, 0xdc, 0x81,
  0x08, 0x2a, 0x0f, 0xde, 0x40, 0xc6, 0x13, 0x22, 0x3d, 0x98, 0x25, 0x08,
  0x06, 0x2a, 0x82, 0x06, 0xa0, 0x85, 0x61, 0xa0, 0x22, 0x0c, 0xc2, 0x00,
  0x98, 0x85, 0xe1, 0xf8, 0x00, 0x88, 0xf1, 0x84, 0xc7, 0x0f, 0xee, 0x0f,
  0xc4, 0x25, 0x50, 0x28, 0x15, 0x0a, 0x76, 0x10, 0x83, 0x0c, 0xa2, 0x20,
  0x06, 0xd9, 0x88, 0x01, 0x61, 0xdc, 0xc4, 0x30, 0x0a, 0xc3, 0x0d, 0xa4,
  0xe0, 0x09, 0xb3, 0x0c, 0xc2, 0x50, 0x0a, 0x23, 0x06, 0x84, 0x71, 0x13,
  0xc4, 0x28, 0x8c, 0x27, 0x44, 0x7e, 0x40, 0xa7, 0x30, 0x68, 0x0f, 0x46,
  0xa1, 0x42, 0x2a, 0x48, 0xa9, 0xc2, 0x27, 0x45, 0x0a, 0xa4, 0x20, 0xb5,
  0x0a, 0xac, 0x40, 0x73, 0x0c, 0x60, 0xd0, 0x0a, 0xcd, 0x20, 0x83, 0x2b,
  0x80, 0x81, 0x56, 0xa6, 0xf0, 0x0a, 0x32, 0xc8, 0x00, 0x0b, 0x60, 0xb0,
  0x55, 0x1f, 0xc4, 0x02, 0xcc, 0x12, 0x0c, 0x03, 0x15, 0x61, 0x20, 0x0b,
  0x42, 0x1f, 0x04, 0xc6, 0x07, 0x0a, 0x0c, 0x86, 0x1b, 0x68, 0x01, 0x23,
  0x83, 0x59, 0x86, 0x80, 0xa8, 0x85, 0x63, 0x03, 0x40, 0xce, 0x0d, 0x00,
  0xa9, 0x37, 0xb0, 0x05, 0x29, 0x5c, 0xb8, 0x05, 0x19, 0x4f, 0x98, 0x72,
  0xe1, 0x74, 0x41, 0xdc, 0xc1, 0x88, 0x5d, 0x98, 0x85, 0x02, 0xc0, 0x80,
  0x18, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x5b, 0x86, 0x09, 0x61,
  0x85, 0x2d, 0xc3, 0x87, 0xb4, 0xc2, 0x96, 0xe1, 0x0c, 0x02, 0x53, 0xd8,
  0x32, 0xa0, 0x41, 0x60, 0x0a, 0x5b, 0x86, 0x3e, 0x08, 0x4e, 0x01, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x61, 0x20, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00,
  0x13, 0x04, 0x41, 0x2c, 0x10, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x04, 0x94, 0x40, 0x11, 0x50, 0x30, 0x03, 0x40, 0xe4, 0x58, 0x03, 0x10,
  0x08, 0x23, 0x00, 0x64, 0xce, 0x41, 0x34, 0xca, 0x82, 0x11, 0x32, 0x03,
  0x40, 0xe1, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf1, 0x30, 0x00, 0x00,
  0x20, 0x00, 0x00, 0x00, 0x43, 0x88, 0x0f, 0x15, 0xbe, 0x69, 0x88, 0xf1,
  0xa5, 0xc2, 0x87, 0x0a, 0x1f, 0x35, 0x44, 0x0b, 0x94, 0xa0, 0x09, 0x9a,
  0xa0, 0x09, 0x94, 0xa0, 0x09, 0x9a, 0xa0, 0x09, 0x94, 0xa0, 0x09, 0x9a,
  0xa0, 0x09, 0x9a, 0x21, 0xda, 0x47, 0x7c, 0xc4, 0x47, 0x7c, 0xc4, 0x47,
  0x7c, 0xc4, 0x47, 0x7c, 0xc4, 0x47, 0x7c, 0xc4, 0x47, 0x7c, 0xc4, 0x47,
  0x0c, 0xd1, 0x3e, 0xe3, 0x3b, 0xbe, 0xe3, 0x3b, 0x3e, 0xe3, 0x3b, 0xbe,
  0xe3, 0x3b, 0x3e, 0xe3, 0x3b, 0xbe, 0xe3, 0x3b, 0xbe, 0x67, 0x88, 0xf6,
  0x2d, 0xdf, 0xf2, 0x2d, 0xdf, 0xf2, 0x2d, 0xdf, 0xf2, 0x2d, 0xdf, 0xf2,
  0x2d, 0xdf, 0xf2, 0x2d, 0xdf, 0xf2, 0x2d, 0x43, 0xb4, 0xaf, 0xf9, 0xa2,
  0x4f, 0xfa, 0x9c, 0xaf, 0xf9, 0xa2, 0x4f, 0xfa, 0x9c, 0xaf, 0xf9, 0xa2,
  0x4f, 0xfa, 0x9c, 0x0f, 0x1a, 0x22, 0x7c, 0xa9, 0x00, 0x00, 0x00, 0x00,
  0xe3, 0x11, 0x50, 0xd2, 0x58, 0xe4, 0x8d, 0xf1, 0x08, 0x28, 0x69, 0x2e,
  0x02, 0x83, 0x31, 0x1e, 0x21, 0x25, 0x8d, 0x45, 0x62, 0x30, 0xc6, 0x23,
  0xa4, 0xa4, 0xb9, 0x88, 0x0c, 0xc6, 0x78, 0x04, 0x95, 0x34, 0x16, 0x99,
  0xc1, 0x18, 0x8f, 0xa0, 0x92, 0xe6, 0x22, 0x34, 0x18, 0x23, 0x06, 0x84,
  0x71, 0x13, 0x41, 0x73, 0x1f, 0x20, 0x17, 0x06, 0x80, 0x18, 0x1b, 0xac,
  0x81, 0x08, 0xaa, 0x0d, 0xd4, 0x40, 0xc6, 0x13, 0x1e, 0x37, 0xb8, 0x37,
  0x10, 0x97, 0xe0, 0xa0, 0x0c, 0x32, 0xc4, 0x41, 0x97, 0xcd, 0x31, 0x70,
  0x55, 0x33, 0xc8, 0x30, 0x07, 0x9c, 0x56, 0x74, 0x20, 0x07, 0x32, 0xc8,
  0x50, 0x07, 0xdc, 0x76, 0x63, 0x00, 0xc8, 0x95, 0x01, 0x20, 0x86, 0x07,
  0x77, 0x20, 0x82, 0xca, 0x03, 0x35, 0x90, 0xf1, 0x84, 0x48, 0x0f, 0x6e,
  0x0f, 0xc4, 0x25, 0x3e, 0x28, 0xd5, 0x07, 0x76, 0x00, 0x83, 0x11, 0x7c,
  0xe0, 0x07, 0x05, 0x30, 0xc8, 0xe0, 0x07, 0x5d, 0x56, 0x74, 0xf0, 0x07,
  0x32, 0xc8, 0x00, 0x0a, 0xdc, 0x76, 0x67, 0x00, 0xc8, 0xa5, 0x01, 0x20,
  0xa5, 0x06, 0xa2, 0x20, 0x45, 0x0a, 0xa3, 0x20, 0xe3, 0x09, 0x53, 0x29,
  0x9c, 0x29, 0x88, 0x4b, 0xa7, 0x50, 0x0a, 0x15, 0x42, 0x01, 0x06, 0x23,
  0x4e, 0x21, 0x15, 0x0a, 0x00, 0x03, 0x62, 0x00, 0x05, 0x00, 0x00, 0x00,
  0x5b, 0x86, 0x09, 0x79, 0x85, 0x2d, 0x43, 0x18, 0x04, 0xa7, 0xb0, 0x65,
  0x68, 0x83, 0xe0, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x61, 0x20, 0x00, 0x00, 0x9a, 0x00, 0x00, 0x00, 0x13, 0x04, 0x41, 0x2c,
  0x10, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x14, 0xcc, 0x00, 0x10,
  0x39, 0xd6, 0x00, 0x04, 0xc2, 0x08, 0x00, 0x99, 0x73, 0x10, 0x8d, 0xb2,
  0x54, 0x84, 0xcc, 0x00, 0x50, 0x38, 0x03, 0x00, 0xf1, 0x30, 0x00, 0x00,
  0x5a, 0x00, 0x00, 0x00, 0x0b, 0xd6, 0xe0, 0x17, 0x74, 0xc1, 0x15, 0x56,
  0x41, 0x0e, 0xc6, 0x81, 0x1d, 0xe8, 0x60, 0x1e, 0xf2, 0x61, 0x1c, 0xd8,
  0x61, 0x0e, 0xec, 0xa1, 0x1c, 0xc6, 0x21, 0x15, 0xcc, 0x81, 0x15, 0xd2,
  0x61, 0x0e, 0x4a, 0xa1, 0x14, 0xda, 0x81, 0x1d, 0x4a, 0xe1, 0x17, 0x7e,
  0xc1, 0x1d, 0xe6, 0x21, 0x0e, 0xcc, 0xe1, 0x17, 0x7e, 0x81, 0x1e, 0xd0,
  0x21, 0x1d, 0xe6, 0x21, 0x0e, 0x58, 0x21, 0x14, 0x66, 0x01, 0x16, 0x16,
  0xdc, 0xc1, 0x2f, 0xe8, 0x82, 0x2b, 0xac, 0x82, 0x1c, 0x8c, 0x03, 0x3b,
  0xd0, 0xc1, 0x3c, 0xe4, 0xc3, 0x38, 0xb0, 0xc3, 0x1c, 0xd8, 0x43, 0x39,
  0x8c, 0x43, 0x2a, 0x98, 0x03, 0x2b, 0xa4, 0xc3, 0x1c, 0x94, 0x42, 0x29,
  0xb4, 0x03, 0x3b, 0x94, 0xc2, 0x2f, 0xfc, 0x82, 0x3b, 0xcc, 0x43, 0x1c,
  0x98, 0xc3, 0x2f, 0xfc, 0x02, 0x3d, 0xa0, 0x43, 0x3a, 0xcc, 0x43, 0x1c,
  0xb0, 0x42, 0x28, 0xcc, 0x02, 0x2c, 0xe8, 0x01, 0x18, 0x84, 0x83, 0x3c,
  0x9c, 0x43, 0x3d, 0xb4, 0x43, 0x39, 0xb8, 0x03, 0x3d, 0x80, 0x01, 0x1c,
  0x0c, 0x21, 0x3e, 0x55, 0xf8, 0xaa, 0x21, 0xc6, 0xb7, 0x0a, 0x9f, 0x2a,
  0x7c, 0xd6, 0x10, 0xe2, 0x63, 0x85, 0x0f, 0x15, 0x86, 0x18, 0x5f, 0x2b,
  0x7c, 0xac, 0xf0, 0xa5, 0xc2, 0x10, 0x35, 0x08, 0x9c, 0xa0, 0x09, 0x9a,
  0xa0, 0x09, 0x9c, 0xa0, 0x09, 0x9a, 0xa0, 0x09, 0x94, 0xa0, 0x09, 0x9a,
  0xa0, 0x09, 0x94, 0xa0, 0x09, 0x9a, 0xa0, 0x09, 0x94, 0xa0, 0x09, 0x9a,
  0xa0, 0x09, 0x9a, 0x21, 0x6a, 0xf0, 0x11, 0x1f, 0xf1, 0x11, 0x1f, 0xf1,
  0x11, 0x1f, 0xf1, 0x11, 0x1f, 0xf1, 0x11, 0x1f, 0xf1, 0x11, 0x1f, 0xf1,
  0x11, 0x1f, 0xf1, 0x11, 0x1f, 0xf1, 0x11, 0x1f, 0xf1, 0x11, 0x1f, 0xf1,
  0x11, 0x43, 0xd4, 0xe0, 0x33, 0xbe, 0xe3, 0x3b, 0xbe, 0xe3, 0x33, 0xbe,
  0xe3, 0x3b, 0xbe, 0xe3, 0x33, 0xbe, 0xe3, 0x3b, 0xbe, 0xe3, 0x33, 0xbe,
  0xe3, 0x3b, 0xbe, 0xe3, 0x33, 0xbe, 0xe3, 0x3b, 0xbe, 0xe3, 0x7b, 0x86,
  0xa8, 0xc1, 0xb7, 0x7c, 0xcb, 0xb7, 0x7c, 0xcb, 0xb7, 0x7c, 0xcb, 0xb7,
  0x7c, 0xcb, 0xb7, 0x7c, 0xcb, 0xb7, 0x7c, 0xcb, 0xb7, 0x7c, 0xcb, 0xb7,
  0x7c, 0xcb, 0xb7, 0x7c, 0xcb, 0xb7, 0x7c, 0xcb, 0xb7, 0x0c, 0x51, 0x83,
  0xaf, 0xf9, 0xa2, 0x4f, 0xfa, 0x9c, 0xaf, 0xf9, 0xa2, 0x4f, 0xfa, 0x9c,
  0xaf, 0xf9, 0xa2, 0x4f, 0xfa, 0x9c, 0xaf, 0xf9, 0xa2, 0x4f, 0xfa, 0x9c,
  0xaf, 0xf9, 0xa2, 0x4f, 0xfa, 0x9c, 0x0f, 0x1a, 0x22, 0x7c, 0xab, 0x30,
  0x44, 0xf8, 0x5a, 0x01, 0x23, 0x06, 0x84, 0x71, 0x13, 0x40, 0x33, 0x62,
  0x40, 0x18, 0x37, 0x11, 0x34, 0xe3, 0x09, 0x12, 0x37, 0x9e, 0xf0, 0x6c,
  0xd7, 0x89, 0x4b, 0x5f, 0x39, 0xef, 0xdc, 0xc1, 0x88, 0x30, 0x00, 0x83,
  0x02, 0x18, 0x4f, 0x98, 0xb8, 0xf1, 0x04, 0x68, 0x3b, 0x31, 0x10, 0x97,
  0xc8, 0xa0, 0xdc, 0x18, 0x9c, 0x3b, 0x18, 0x61, 0x06, 0x65, 0x50, 0x00,
  0xe3, 0x09, 0x11, 0x77, 0x67, 0x20, 0x2e, 0xa1, 0x41, 0x19, 0x64, 0x48,
  0x03, 0xcd, 0x9a, 0x63, 0xc8, 0xa8, 0x66, 0x90, 0x61, 0x0d, 0xb2, 0xab,
  0xd8, 0x40, 0x0d, 0x64, 0x90, 0xa1, 0x0d, 0x32, 0x8c, 0xc2, 0xa0, 0xd4,
  0x1b, 0xb8, 0x01, 0x0c, 0x46, 0x84, 0x01, 0x1c, 0x14, 0x00, 0x7d, 0x65,
  0x90, 0x21, 0x0e, 0x34, 0xab, 0xd8, 0x40, 0x0e, 0x64, 0x90, 0x61, 0x0e,
  0x32, 0x8c, 0xcc, 0xa0, 0x54, 0x1d, 0xd0, 0x01, 0x0c, 0x46, 0x98, 0x81,
  0x1d, 0x14, 0xc0, 0x88, 0x01, 0x71, 0xdc, 0x84, 0xa0, 0x50, 0x18, 0x94,
  0xc1, 0x88, 0xef, 0x0e, 0x0a, 0x80, 0xcc, 0xa0, 0x0c, 0x46, 0x90, 0x01,
  0x1e, 0x14, 0x00, 0x06, 0xc4, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00,
  0x5b, 0x86, 0x23, 0x38, 0x85, 0x2d, 0x43, 0x13, 0x9c, 0xc2, 0x96, 0x01,
  0x42, 0x66, 0x61, 0xcb, 0x80, 0x05, 0xa7, 0xb0, 0x65, 0xc8, 0x10, 0x5a,
  0xd8, 0x32, 0x7c, 0xc1, 0x29, 0x6c, 0x19, 0xc4, 0x20, 0x38, 0x85, 0x2d,
  0x03, 0x19, 0x04, 0xa7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00
};
const char *const SYCL_nbody_sycl_cpp_bin_spir64_features[] = {
  0
};
const kernel_binary_info SYCL_nbody_sycl_cpp_bin_spir64_info = {
  "spir64",
  64,
  SYCL_nbody_sycl_cpp_bin_spir64,
  sizeof(SYCL_nbody_sycl_cpp_bin_spir64),
  SYCL_nbody_sycl_cpp_bin_spir64_features
};

} // namespace
} // namespace detail
} // namespace sycl
} // namespace cl
namespace kernels {
template <int access, int num_bodies> class IntegrateBodyKernel;
} // namespace kernels

//
// SYCL kernel info for: ::kernels::IntegrateBodyKernel<2, 4096>
//
namespace cl {
namespace sycl {
namespace detail {
namespace {

template <>
struct kernel_info< ::kernels::IntegrateBodyKernel<2, 4096> > {
  static const char* name;

  static const size_t bin_count;
  static const kernel_binary_info *const bin_info[];

  static const size_t arg_size;
  static const size_t arg_sizes[];
  static const size_t arg_offsets[];
  static const int arg_kinds[];
  static const int arg_class[];
  static const bool arg_used[];

  typedef const size_t* const_iterator;
  typedef const int* const_kind_iterator;
  typedef const bool* const_used_iterator;
  typedef const kernel_binary_info * const* blob_iterator;
  static blob_iterator binary_begin() { return bin_count > 0 ? &bin_info[0] : 0; }
  static blob_iterator binary_end() { return binary_begin() + bin_count; }
  static const_iterator size_begin() { return arg_size > 0 ? &arg_sizes[0] : 0; }
  static const_iterator size_end() { return size_begin() + arg_size; }
  static const_iterator offset_begin() { return arg_size > 0 ? &arg_offsets[0] : 0; }
  static const_iterator offset_end() { return offset_begin() + arg_size; }
  static const_kind_iterator kind_begin() { return arg_size > 0 ? &arg_kinds[0] : 0; }
  static const_kind_iterator kind_end() { return kind_begin() + arg_size; }
  static const_kind_iterator class_begin() { return arg_size > 0 ? &arg_class[0] : 0; }
  static const_kind_iterator class_end() { return class_begin() + arg_size; }
  static const_used_iterator used_begin() { return arg_size > 0 ? &arg_used[0] : 0; }
  static const_used_iterator used_end() { return used_begin() + arg_size; }
};
const char* kernel_info< ::kernels::IntegrateBodyKernel<2, 4096> >::name = "SYCL_class_kernels__IntegrateBodyKernel_2__4096_";
const size_t kernel_info< ::kernels::IntegrateBodyKernel<2, 4096> >::bin_count = 1;
const kernel_binary_info *const kernel_info< ::kernels::IntegrateBodyKernel<2, 4096> >::bin_info[] = {
  &SYCL_nbody_sycl_cpp_bin_spir64_info,
  0
};
const size_t kernel_info< ::kernels::IntegrateBodyKernel<2, 4096> >::arg_size = 21;
const size_t kernel_info< ::kernels::IntegrateBodyKernel<2, 4096> >::arg_sizes[] = {
  8, // __local class cl::sycl::vec<float, 3> *
  16, // class cl::sycl::device_index_array
  16, // class cl::sycl::device_index_array
  16, // class cl::sycl::device_index_array
  8, // __local class cl::sycl::vec<float, 3> *
  16, // class cl::sycl::device_index_array
  16, // class cl::sycl::device_index_array
  16, // class cl::sycl::device_index_array
  8, // __global class cl::sycl::vec<float, 3> *
  16, // class cl::sycl::device_index_array
  16, // class cl::sycl::device_index_array
  16, // class cl::sycl::device_index_array
  8, // __global class cl::sycl::vec<float, 3> *
  16, // class cl::sycl::device_index_array
  16, // class cl::sycl::device_index_array
  16, // class cl::sycl::device_index_array
  8, // __global class cl::sycl::vec<float, 3> *
  16, // class cl::sycl::device_index_array
  16, // class cl::sycl::device_index_array
  16, // class cl::sycl::device_index_array
  4, // const float
  0
};
const size_t kernel_info< ::kernels::IntegrateBodyKernel<2, 4096> >::arg_offsets[] = {
  0, // __local class cl::sycl::vec<float, 3> *
  8, // class cl::sycl::device_index_array
  24, // class cl::sycl::device_index_array
  40, // class cl::sycl::device_index_array
  56, // __local class cl::sycl::vec<float, 3> *
  64, // class cl::sycl::device_index_array
  80, // class cl::sycl::device_index_array
  96, // class cl::sycl::device_index_array
  112, // __global class cl::sycl::vec<float, 3> *
  120, // class cl::sycl::device_index_array
  136, // class cl::sycl::device_index_array
  152, // class cl::sycl::device_index_array
  168, // __global class cl::sycl::vec<float, 3> *
  176, // class cl::sycl::device_index_array
  192, // class cl::sycl::device_index_array
  208, // class cl::sycl::device_index_array
  224, // __global class cl::sycl::vec<float, 3> *
  232, // class cl::sycl::device_index_array
  248, // class cl::sycl::device_index_array
  264, // class cl::sycl::device_index_array
  280, // const float
  0
};
const int kernel_info< ::kernels::IntegrateBodyKernel<2, 4096> >::arg_kinds[] = {
  2, // Pointer
  1, // Normal
  1, // Normal
  1, // Normal
  2, // Pointer
  1, // Normal
  1, // Normal
  1, // Normal
  2, // Pointer
  1, // Normal
  1, // Normal
  1, // Normal
  2, // Pointer
  1, // Normal
  1, // Normal
  1, // Normal
  2, // Pointer
  1, // Normal
  1, // Normal
  1, // Normal
  1, // Normal
  0
};
const int kernel_info< ::kernels::IntegrateBodyKernel<2, 4096> >::arg_class[] = {
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  0,
  0
};
const bool kernel_info< ::kernels::IntegrateBodyKernel<2, 4096> >::arg_used[] = {
  true, // __local class cl::sycl::vec<float, 3> *
  false, // class cl::sycl::device_index_array
  false, // class cl::sycl::device_index_array
  false, // class cl::sycl::device_index_array
  true, // __local class cl::sycl::vec<float, 3> *
  false, // class cl::sycl::device_index_array
  false, // class cl::sycl::device_index_array
  false, // class cl::sycl::device_index_array
  true, // __global class cl::sycl::vec<float, 3> *
  false, // class cl::sycl::device_index_array
  false, // class cl::sycl::device_index_array
  false, // class cl::sycl::device_index_array
  true, // __global class cl::sycl::vec<float, 3> *
  false, // class cl::sycl::device_index_array
  false, // class cl::sycl::device_index_array
  false, // class cl::sycl::device_index_array
  true, // __global class cl::sycl::vec<float, 3> *
  false, // class cl::sycl::device_index_array
  false, // class cl::sycl::device_index_array
  false, // class cl::sycl::device_index_array
  true, // const float
  0
};

} // namespace
} // namespace detail
} // namespace sycl
} // namespace cl
namespace kernels {
template <int access, int num_bodies> class ComputeForceKernel;
} // namespace kernels

//
// SYCL kernel info for: ::kernels::ComputeForceKernel<1, 4096>
//
namespace cl {
namespace sycl {
namespace detail {
namespace {

template <>
struct kernel_info< ::kernels::ComputeForceKernel<1, 4096> > {
  static const char* name;

  static const size_t bin_count;
  static const kernel_binary_info *const bin_info[];

  static const size_t arg_size;
  static const size_t arg_sizes[];
  static const size_t arg_offsets[];
  static const int arg_kinds[];
  static const int arg_class[];
  static const bool arg_used[];

  typedef const size_t* const_iterator;
  typedef const int* const_kind_iterator;
  typedef const bool* const_used_iterator;
  typedef const kernel_binary_info * const* blob_iterator;
  static blob_iterator binary_begin() { return bin_count > 0 ? &bin_info[0] : 0; }
  static blob_iterator binary_end() { return binary_begin() + bin_count; }
  static const_iterator size_begin() { return arg_size > 0 ? &arg_sizes[0] : 0; }
  static const_iterator size_end() { return size_begin() + arg_size; }
  static const_iterator offset_begin() { return arg_size > 0 ? &arg_offsets[0] : 0; }
  static const_iterator offset_end() { return offset_begin() + arg_size; }
  static const_kind_iterator kind_begin() { return arg_size > 0 ? &arg_kinds[0] : 0; }
  static const_kind_iterator kind_end() { return kind_begin() + arg_size; }
  static const_kind_iterator class_begin() { return arg_size > 0 ? &arg_class[0] : 0; }
  static const_kind_iterator class_end() { return class_begin() + arg_size; }
  static const_used_iterator used_begin() { return arg_size > 0 ? &arg_used[0] : 0; }
  static const_used_iterator used_end() { return used_begin() + arg_size; }
};
const char* kernel_info< ::kernels::ComputeForceKernel<1, 4096> >::name = "SYCL_class_kernels__ComputeForceKernel_1__4096_";
const size_t kernel_info< ::kernels::ComputeForceKernel<1, 4096> >::bin_count = 1;
const kernel_binary_info *const kernel_info< ::kernels::ComputeForceKernel<1, 4096> >::bin_info[] = {
  &SYCL_nbody_sycl_cpp_bin_spir64_info,
  0
};
const size_t kernel_info< ::kernels::ComputeForceKernel<1, 4096> >::arg_size = 12;
const size_t kernel_info< ::kernels::ComputeForceKernel<1, 4096> >::arg_sizes[] = {
  8, // __global class cl::sycl::vec<float, 3> *
  16, // class cl::sycl::device_index_array
  16, // class cl::sycl::device_index_array
  16, // class cl::sycl::device_index_array
  8, // __global float *
  16, // class cl::sycl::device_index_array
  16, // class cl::sycl::device_index_array
  16, // class cl::sycl::device_index_array
  8, // __global class cl::sycl::vec<float, 3> *
  16, // class cl::sycl::device_index_array
  16, // class cl::sycl::device_index_array
  16, // class cl::sycl::device_index_array
  0
};
const size_t kernel_info< ::kernels::ComputeForceKernel<1, 4096> >::arg_offsets[] = {
  0, // __global class cl::sycl::vec<float, 3> *
  8, // class cl::sycl::device_index_array
  24, // class cl::sycl::device_index_array
  40, // class cl::sycl::device_index_array
  56, // __global float *
  64, // class cl::sycl::device_index_array
  80, // class cl::sycl::device_index_array
  96, // class cl::sycl::device_index_array
  112, // __global class cl::sycl::vec<float, 3> *
  120, // class cl::sycl::device_index_array
  136, // class cl::sycl::device_index_array
  152, // class cl::sycl::device_index_array
  0
};
const int kernel_info< ::kernels::ComputeForceKernel<1, 4096> >::arg_kinds[] = {
  2, // Pointer
  1, // Normal
  1, // Normal
  1, // Normal
  2, // Pointer
  1, // Normal
  1, // Normal
  1, // Normal
  2, // Pointer
  1, // Normal
  1, // Normal
  1, // Normal
  0
};
const int kernel_info< ::kernels::ComputeForceKernel<1, 4096> >::arg_class[] = {
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  0
};
const bool kernel_info< ::kernels::ComputeForceKernel<1, 4096> >::arg_used[] = {
  true, // __global class cl::sycl::vec<float, 3> *
  false, // class cl::sycl::device_index_array
  false, // class cl::sycl::device_index_array
  true, // class cl::sycl::device_index_array
  true, // __global float *
  false, // class cl::sycl::device_index_array
  false, // class cl::sycl::device_index_array
  true, // class cl::sycl::device_index_array
  true, // __global class cl::sycl::vec<float, 3> *
  false, // class cl::sycl::device_index_array
  false, // class cl::sycl::device_index_array
  true, // class cl::sycl::device_index_array
  0
};

} // namespace
} // namespace detail
} // namespace sycl
} // namespace cl
//
// SYCL kernel info for: ::kernels::ComputeForceKernel<2, 4096>
//
namespace cl {
namespace sycl {
namespace detail {
namespace {

template <>
struct kernel_info< ::kernels::ComputeForceKernel<2, 4096> > {
  static const char* name;

  static const size_t bin_count;
  static const kernel_binary_info *const bin_info[];

  static const size_t arg_size;
  static const size_t arg_sizes[];
  static const size_t arg_offsets[];
  static const int arg_kinds[];
  static const int arg_class[];
  static const bool arg_used[];

  typedef const size_t* const_iterator;
  typedef const int* const_kind_iterator;
  typedef const bool* const_used_iterator;
  typedef const kernel_binary_info * const* blob_iterator;
  static blob_iterator binary_begin() { return bin_count > 0 ? &bin_info[0] : 0; }
  static blob_iterator binary_end() { return binary_begin() + bin_count; }
  static const_iterator size_begin() { return arg_size > 0 ? &arg_sizes[0] : 0; }
  static const_iterator size_end() { return size_begin() + arg_size; }
  static const_iterator offset_begin() { return arg_size > 0 ? &arg_offsets[0] : 0; }
  static const_iterator offset_end() { return offset_begin() + arg_size; }
  static const_kind_iterator kind_begin() { return arg_size > 0 ? &arg_kinds[0] : 0; }
  static const_kind_iterator kind_end() { return kind_begin() + arg_size; }
  static const_kind_iterator class_begin() { return arg_size > 0 ? &arg_class[0] : 0; }
  static const_kind_iterator class_end() { return class_begin() + arg_size; }
  static const_used_iterator used_begin() { return arg_size > 0 ? &arg_used[0] : 0; }
  static const_used_iterator used_end() { return used_begin() + arg_size; }
};
const char* kernel_info< ::kernels::ComputeForceKernel<2, 4096> >::name = "SYCL_class_kernels__ComputeForceKernel_2__4096_";
const size_t kernel_info< ::kernels::ComputeForceKernel<2, 4096> >::bin_count = 1;
const kernel_binary_info *const kernel_info< ::kernels::ComputeForceKernel<2, 4096> >::bin_info[] = {
  &SYCL_nbody_sycl_cpp_bin_spir64_info,
  0
};
const size_t kernel_info< ::kernels::ComputeForceKernel<2, 4096> >::arg_size = 12;
const size_t kernel_info< ::kernels::ComputeForceKernel<2, 4096> >::arg_sizes[] = {
  8, // __global class cl::sycl::vec<float, 3> *
  16, // class cl::sycl::device_index_array
  16, // class cl::sycl::device_index_array
  16, // class cl::sycl::device_index_array
  8, // __global float *
  16, // class cl::sycl::device_index_array
  16, // class cl::sycl::device_index_array
  16, // class cl::sycl::device_index_array
  8, // __global class cl::sycl::vec<float, 3> *
  16, // class cl::sycl::device_index_array
  16, // class cl::sycl::device_index_array
  16, // class cl::sycl::device_index_array
  0
};
const size_t kernel_info< ::kernels::ComputeForceKernel<2, 4096> >::arg_offsets[] = {
  0, // __global class cl::sycl::vec<float, 3> *
  8, // class cl::sycl::device_index_array
  24, // class cl::sycl::device_index_array
  40, // class cl::sycl::device_index_array
  56, // __global float *
  64, // class cl::sycl::device_index_array
  80, // class cl::sycl::device_index_array
  96, // class cl::sycl::device_index_array
  112, // __global class cl::sycl::vec<float, 3> *
  120, // class cl::sycl::device_index_array
  136, // class cl::sycl::device_index_array
  152, // class cl::sycl::device_index_array
  0
};
const int kernel_info< ::kernels::ComputeForceKernel<2, 4096> >::arg_kinds[] = {
  2, // Pointer
  1, // Normal
  1, // Normal
  1, // Normal
  2, // Pointer
  1, // Normal
  1, // Normal
  1, // Normal
  2, // Pointer
  1, // Normal
  1, // Normal
  1, // Normal
  0
};
const int kernel_info< ::kernels::ComputeForceKernel<2, 4096> >::arg_class[] = {
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  0
};
const bool kernel_info< ::kernels::ComputeForceKernel<2, 4096> >::arg_used[] = {
  true, // __global class cl::sycl::vec<float, 3> *
  false, // class cl::sycl::device_index_array
  false, // class cl::sycl::device_index_array
  true, // class cl::sycl::device_index_array
  true, // __global float *
  false, // class cl::sycl::device_index_array
  false, // class cl::sycl::device_index_array
  true, // class cl::sycl::device_index_array
  true, // __global class cl::sycl::vec<float, 3> *
  false, // class cl::sycl::device_index_array
  false, // class cl::sycl::device_index_array
  true, // class cl::sycl::device_index_array
  0
};

} // namespace
} // namespace detail
} // namespace sycl
} // namespace cl
//
// SYCL kernel info for: ::kernels::IntegrateBodyKernel<1, 4096>
//
namespace cl {
namespace sycl {
namespace detail {
namespace {

template <>
struct kernel_info< ::kernels::IntegrateBodyKernel<1, 4096> > {
  static const char* name;

  static const size_t bin_count;
  static const kernel_binary_info *const bin_info[];

  static const size_t arg_size;
  static const size_t arg_sizes[];
  static const size_t arg_offsets[];
  static const int arg_kinds[];
  static const int arg_class[];
  static const bool arg_used[];

  typedef const size_t* const_iterator;
  typedef const int* const_kind_iterator;
  typedef const bool* const_used_iterator;
  typedef const kernel_binary_info * const* blob_iterator;
  static blob_iterator binary_begin() { return bin_count > 0 ? &bin_info[0] : 0; }
  static blob_iterator binary_end() { return binary_begin() + bin_count; }
  static const_iterator size_begin() { return arg_size > 0 ? &arg_sizes[0] : 0; }
  static const_iterator size_end() { return size_begin() + arg_size; }
  static const_iterator offset_begin() { return arg_size > 0 ? &arg_offsets[0] : 0; }
  static const_iterator offset_end() { return offset_begin() + arg_size; }
  static const_kind_iterator kind_begin() { return arg_size > 0 ? &arg_kinds[0] : 0; }
  static const_kind_iterator kind_end() { return kind_begin() + arg_size; }
  static const_kind_iterator class_begin() { return arg_size > 0 ? &arg_class[0] : 0; }
  static const_kind_iterator class_end() { return class_begin() + arg_size; }
  static const_used_iterator used_begin() { return arg_size > 0 ? &arg_used[0] : 0; }
  static const_used_iterator used_end() { return used_begin() + arg_size; }
};
const char* kernel_info< ::kernels::IntegrateBodyKernel<1, 4096> >::name = "SYCL_class_kernels__IntegrateBodyKernel_1__4096_";
const size_t kernel_info< ::kernels::IntegrateBodyKernel<1, 4096> >::bin_count = 1;
const kernel_binary_info *const kernel_info< ::kernels::IntegrateBodyKernel<1, 4096> >::bin_info[] = {
  &SYCL_nbody_sycl_cpp_bin_spir64_info,
  0
};
const size_t kernel_info< ::kernels::IntegrateBodyKernel<1, 4096> >::arg_size = 13;
const size_t kernel_info< ::kernels::IntegrateBodyKernel<1, 4096> >::arg_sizes[] = {
  8, // __global class cl::sycl::vec<float, 3> *
  16, // class cl::sycl::device_index_array
  16, // class cl::sycl::device_index_array
  16, // class cl::sycl::device_index_array
  8, // __global class cl::sycl::vec<float, 3> *
  16, // class cl::sycl::device_index_array
  16, // class cl::sycl::device_index_array
  16, // class cl::sycl::device_index_array
  8, // __global class cl::sycl::vec<float, 3> *
  16, // class cl::sycl::device_index_array
  16, // class cl::sycl::device_index_array
  16, // class cl::sycl::device_index_array
  4, // const float
  0
};
const size_t kernel_info< ::kernels::IntegrateBodyKernel<1, 4096> >::arg_offsets[] = {
  0, // __global class cl::sycl::vec<float, 3> *
  8, // class cl::sycl::device_index_array
  24, // class cl::sycl::device_index_array
  40, // class cl::sycl::device_index_array
  56, // __global class cl::sycl::vec<float, 3> *
  64, // class cl::sycl::device_index_array
  80, // class cl::sycl::device_index_array
  96, // class cl::sycl::device_index_array
  112, // __global class cl::sycl::vec<float, 3> *
  120, // class cl::sycl::device_index_array
  136, // class cl::sycl::device_index_array
  152, // class cl::sycl::device_index_array
  168, // const float
  0
};
const int kernel_info< ::kernels::IntegrateBodyKernel<1, 4096> >::arg_kinds[] = {
  2, // Pointer
  1, // Normal
  1, // Normal
  1, // Normal
  2, // Pointer
  1, // Normal
  1, // Normal
  1, // Normal
  2, // Pointer
  1, // Normal
  1, // Normal
  1, // Normal
  1, // Normal
  0
};
const int kernel_info< ::kernels::IntegrateBodyKernel<1, 4096> >::arg_class[] = {
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  0,
  0
};
const bool kernel_info< ::kernels::IntegrateBodyKernel<1, 4096> >::arg_used[] = {
  true, // __global class cl::sycl::vec<float, 3> *
  false, // class cl::sycl::device_index_array
  false, // class cl::sycl::device_index_array
  true, // class cl::sycl::device_index_array
  true, // __global class cl::sycl::vec<float, 3> *
  false, // class cl::sycl::device_index_array
  false, // class cl::sycl::device_index_array
  true, // class cl::sycl::device_index_array
  true, // __global class cl::sycl::vec<float, 3> *
  false, // class cl::sycl::device_index_array
  false, // class cl::sycl::device_index_array
  true, // class cl::sycl::device_index_array
  true, // const float
  0
};

} // namespace
} // namespace detail
} // namespace sycl
} // namespace cl
#endif // CODEPLAY_SYCL_nbody_sycl_cpp_STUB
